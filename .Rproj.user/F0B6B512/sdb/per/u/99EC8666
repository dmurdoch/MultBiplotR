{
    "collab_server" : "",
    "contents" : "function (X, sup.rows = NULL, sup.cols = NULL, transform = \"Standardize columns\") \n{\n  if (is.data.frame(X)) \n    X = as.matrix(X)\n  n = nrow(X)\n  p = ncol(X)\n  RowNames = rownames(X)\n  ColNames = colnames(X)\n  ContinuousDataTransform = c(\"Raw Data\", \"Substract the global mean\", \n                              \"Double centering\", \"Column centering\", \"Standardize columns\", \n                              \"Row centering\", \"Standardize rows\", \"Divide by the column means and center\", \n                              \"Normalized residuals from independence\")\n  if (is.numeric(transform)) \n    transform = ContinuousDataTransform[transform]\n  if (is.null(sup.rows)) \n    nfs = 0\n  else {\n    nfs = nrow(sup.rows)\n    if (!(p == ncol(sup.rows))) \n      stop(\"The #cols of the supplementary rows must be the same as the #cols of X\")\n  }\n  if (is.null(sup.cols)) \n    ncs = 0\n  else {\n    ncs = ncol(sup.cols)\n    if (!(n == nrow(sup.cols))) \n      stop(\"The #rows of the supplementary columns must be the same as the #rows of X\")\n  }\n  nsup = nfs + ncs\n  if ((transform == \"Double centering\") & (nsup > 0)) \n    stop(\"Double Centering is not compatible with supplementary rows or columns\")\n  if ((transform == \"Divide by the column means and center\") & \n      (nsup > 0)) \n    stop(\"Dividing by the column means and centering is not compatible with supplementary rows or columns\")\n  if ((transform == \"Double centering\") & (nsup > 0)) \n    stop(\"Normalized residuals from independence are not compatible with supplementary rows or columns\")\n  switch(transform, `Substract the global mean` = {\n    gmean = mean(X)\n    X = X - gmean\n    if (nfs > 0) sup.rows = sup.rows - gmean\n    if (ncs > 0) sup.cols = sup.cols - gmean\n  }, `Double centering` = {\n    X = (diag(n) - matrix(1, n, n)/n) %*% X %*% (diag(p) - \n                                                   matrix(1, p, p)/p)\n  }, `Column centering` = {\n    print(transform)\n    means = apply(X, 2, mean)\n    for (i in 1:p) X[, i] = X[, i] - means[i]\n    if (nfs > 0) sup.rows = (sup.rows - matrix(1, nfs, 1) %*% \n                               means)\n    if (ncs > 0) sup.cols = (diag(n) - matrix(1, n, n)/n) %*% \n      sup.cols\n  }, `Standardize columns` = {\n    means = apply(X, 2, mean)\n    stdDevs = apply(X, 2, sd)\n    for (i in 1:p) X[, i] = (X[, i] - means[i])/stdDevs[i]\n    if (nfs > 0) sup.rows = (sup.rows - matrix(1, nfs, 1) %*% \n                               means) %*% solve(diag(stdDevs))\n    if (ncs > 0) {\n      stdDev2 = apply(sup.cols, 2, sd)\n      sup.cols = (diag(n) - matrix(1, n, n)/n) %*% sup.cols %*% \n        solve(diag(stdDev2))\n    }\n  }, `Row centering` = {\n    means = apply(X, 1, mean)\n    X = X %*% (diag(p) - matrix(1, p, p)/p)\n    if (nfs > 0) {\n      means2 = apply(sup.rows, 2, mean)\n      for (i in (1:nfs)) {\n        sup.rows[i, ] = (sup.rows[i, ] - means2[i])\n      }\n      if (ncs > 0) {\n        for (i in (1:n)) sup.cols[i, ] = (sup.cols[i, \n                                                   ] - sup.cols[i])\n      }\n    }\n  }, `Standardize rows` = {\n    means = apply(X, 1, mean)\n    stdDevs = apply(X, 1, sd)\n    X = solve(diag(stdDevs)) %*% X %*% (diag(p) - matrix(1, \n                                                         p, p)/p)\n    if (nfs > 0) {\n      means2 = apply(sup.rows, 1, mean)\n      stdDEvs2 = apply(sup.rows, 1, sd)\n      for (i in (1:nfs)) sup.rows[i, ] = (sup.rows[i, ] - \n                                            means2[i])/stdDEvs2[i]\n    }\n    if (ncs > 0) {\n      for (i in (1:n)) sup.cols[i, ] = (sup.cols[i, ] - \n                                          means[i])/stdDevs[i]\n    }\n  }, `Divide by the column means and center` = {\n    means = apply(X, 2, mean)\n    for (i in (1:p)) X[, i] = X[, i]/means[i]\n    X = (diag(n) - matrix(1, n, n)/n) %*% X\n  }, `Normalized residuals from independence` = {\n    nt = sum(sum(X))\n    dr = apply(X, 1, sum)\n    dc = apply(X, 2, sum)\n    esp = (t(t(dr)) %*% dc)/nt\n    var = t(t(1 - dr/nt)) %*% (1 - dc/nt)\n    xp = ((xp - esp)/sqrt(esp))/sqrt(var)\n  })\n  rownames(X) = RowNames\n  colnames(X) = ColNames\n  Data = list()\n  Data$X <- X\n  Data$sup.rows <- sup.rows\n  Data$sup.cols <- sup.cols\n  return(Data)\n}",
    "created" : 1456853269547.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "1021723587",
    "id" : "99EC8666",
    "lastKnownWriteTime" : 7011605692497750387,
    "last_content_update" : 0,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}