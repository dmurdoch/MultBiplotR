{
    "contents" : "#  Biplot for Factor Analysis\nFA.Biplot <- function(X, dimension = 3, Extraction=\"PC\", Rotation=\"varimax\", \n                      InitComunal=\"A1\", normalize=FALSE, Scores= \"Regression\",  \n                      MethodArgs=NULL, sup.rows = NULL, sup.cols = NULL, ...) {\n  InitComunals=c(\"A1\", \"HSC\", \"MC\")\n  if (is.numeric(InitComunal)) \n    InitComunal = InitComunals[InitComunal]\n  Scoress=c(\"Regression\", \"Bartlett\")\n  if (is.numeric(Scores)) \n    Scores = Scoress[Scores]\n  \n  Scaling=4;\n  alpha=0;\n  if (is.data.frame(X)) \n    X = as.matrix(X)\n  n = nrow(X)\n  p = ncol(X)\n  # Setting the properties of data\n  if (is.null(rownames(X))) \n    rownames(X) <- rownames(X, do.NULL = FALSE, prefix = \"I\")\n  RowNames = rownames(X)\n  if (is.null(colnames(X))) \n    colnames(X) <- colnames(X, do.NULL = FALSE, prefix = \"V\")\n  VarNames = colnames(X)\n  \n  DimNames = paste(\"Factor\", 1:dimension, sep=\"_\")\n  \n  if (is.null(sup.rows)) \n    nfs = 0\n  else {\n    if (!(p == ncol(sup.rows))) \n      stop(\"The #cols of the supplementary rows must be the same as the #cols of X\")\n    nfs = nrow(sup.rows)\n    if (is.null(rownames(sup.rows))) \n      rownames(sup.rows) <- rownames(sup.rows, do.NULL = FALSE, prefix = \"IS\")\n    colnames(sup.rows) <- VarNames\n  }\n  if (is.null(sup.cols)) \n    ncs = 0\n  else {\n    if (!(n == nrow(sup.cols))) \n      stop(\"The #rows of the supplementary columns must be the same as the #rows of X\")\n    ncs = ncol(sup.cols)\n    if (is.null(colnames(sup.cols))) \n      colnames(sup.cols) <- colnames(sup.cols, do.NULL = FALSE, prefix = \"SV\")\n    rownames(sup.cols) <- RowNames\n  }\n  Biplot = list()\n  Biplot$Title = \"Factor Analysis Biplot\"\n  Biplot$Type = \"FA\" \n  Biplot$call <- match.call()\n  Biplot$alpha=alpha\n  Biplot$Non_Scaled_Data = X\n  Biplot$Means = apply(X, 2, mean)\n  Biplot$Medians = apply(X, 2, median)\n  Biplot$Deviations = apply(X, 2, sd)\n  Biplot$Minima = apply(X, 2, min)\n  Biplot$Maxima = apply(X, 2, max)\n  Biplot$P25 = apply(X, 2, quantile)[2, ]\n  Biplot$P75 = apply(X, 2, quantile)[4, ]\n  Biplot$GMean = mean(X)\n  Biplot$Sup.Rows = sup.rows\n  Biplot$Sup.Cols = sup.cols\n  Extractions=c(\"PC\", \"IPF\", \"ML\")\n  if (is.numeric(Extraction)) \n    Extraction = Extractions[Extraction]\n  \n  ContinuousDataTransform = c( \"Substract the global mean\", \"Double centering\", \"Column centering\", \"Standardize columns\", \"Row centering\", \n                               \"Standardize rows\",\"Raw Data\", \"Divide by the column means and center\", \"Normalized residuals from independence\")\n  if (is.numeric(Scaling)) \n    Scaling = ContinuousDataTransform[Scaling]\n  Biplot$Initial_Transformation = Scaling\n  Data = InitialTransform(X, sup.rows, sup.cols, transform = Scaling)\n  X = Data$X\n  rownames(X) = RowNames\n  colnames(X) = VarNames\n  Biplot$Scaled_Data = X\n  Biplot$Scaled_Sup.Rows = Data$sup.rows\n  Biplot$Scaled_Sup.Cols = Data$sup.cols\n  if (nfs > 0) {\n    rownames(Biplot$Scaled_Sup.Rows) <- rownames(sup.rows)\n    colnames(Biplot$Scaled_Sup.Rows) <- colnames(sup.rows)\n  }\n  if (ncs > 0) {\n    rownames(Biplot$Scaled_Sup.Cols) <- rownames(sup.cols)\n    colnames(Biplot$Scaled_Sup.Cols) <- colnames(sup.cols)\n  }\n  # Calculating the Biplot\n  R = cor(X)\n  Biplot$R = R\n  \n  if (Extraction==\"PC\"){\n    SD = svd(R)\n    b = SD$u[,1:dimension] %*% diag(sqrt(SD$d[1:dimension]))\n    SCT=p\n    EV = SD$d[1:dimension]\n  }\n  \n  if (Extraction==\"IPF\"){\n    SD = PrinAxesFA(R, dimsol=dimension, method=InitComunal, tol=0.0001,  MaxIter=50)\n    b = SD$A\n    SCT=p\n    EV = SD$Eigenvalues\n  }\n  \n  if (Extraction==\"ML\"){\n    SD = factanal(X, factors = dimension, rotation =\"none\")\n    b = matrix(SD$loadings, p , dimension)\n    rownames(b)=rownames(R)\n    colnames(b)=paste(\"Factor\",1:dimension, sep=\"_\")\n    SCT=p\n    EV = apply(b^2, 2, sum)\n  }\n # Rotaciones\n  Rotations=c(\"quartimax\", \"varimax\", \"equamax\", \"parsimax\", \"entropy\", \"bifactorT\", \"oblimin\", \"quartimin\", \"oblimax\", \"simplimax\", \"bifactorQ\" )\n if (is.numeric(Rotation)) \n   Rotation = Rotations[Rotation]\n\n if (is.element(Rotation, c(\"quartimax\", \"varimax\", \"equamax\", \"parsimax\", \"entropy\", \"bifactorT\")))\n   rotated=GPForth(b, normalize=normalize, method=Rotation, methodArgs=MethodArgs, ...)\n if (Rotation==\"eaquamax\")\n   rotated=cfT(b,kappa=dimension/(2*p))\n if (Rotation==\"parsimax\")\n   rotated=cfT(b,kappa=(dimension-1)/(p+dimension-2))\n if (is.element(Rotation, c( \"oblimin\", \"quartimin\", \"oblimax\", \"simplimax\", \"bifactorQ\" )))\n   rotated=GPFoblq(b, normalize=normalize, method=Rotation, methodArgs=MethodArgs, ...)\n b=rotated$loadings\n\n  # Me falta calcular la rotación, hay un enorme lío y bastante diferencia con Matlab\n  \n  h=apply(b^2,1,sum)\n  u=1-h\n  \n  switch(Scores, Regression = {\n    a= X %*% diag(1/u^2) %*% b %*% solve(t(b) %*% diag(1/u^2) %*% b)\n  }, Bartlett={\n    a=X %*% solve(R) %*% b\n  })\n  \n  Inertia = round((EV/SCT) * 100, digits = 3)\n  CumInertia = cumsum(Inertia)\n  Biplot$Communalities=apply(b^2,1,sum)\n  Biplot$Uniqueness=1-Biplot$Communalities\n  rownames(a) <- RowNames\n  colnames(a) <- DimNames\n  rownames(b) <- VarNames\n  colnames(b) <- DimNames\n  CorrXCP = cor(X, a, method = \"pearson\")\n  # Relative contributions of the rows\n  \n  sf = apply((X^2), 1, sum)\n  cf=matrix(0,n,dimension)\n  for (k in 1:dimension)\n    cf[,k]= round((a[,k]*sqrt(EV[k]))^2/ sf*100, digits = 2)\n  rownames(cf) = RowNames\n  colnames(cf) = DimNames\n  cfacum = t(apply(cf, 1, cumsum))\n  # Relative contributions of the rows \n  \n  cc=round((b^2)*100, digits = 2)\n  rownames(cc) = VarNames\n  colnames(cc) = DimNames\n  ccacum = t(apply(cc, 1, cumsum))\n  if (nfs > 0) {\n    as = sup.rows %*% SD$v\n    sf = apply((sup.rows^2), 1, sum)\n    cfs = round((solve(diag(sf)) %*% as^2) * 100, digits = 2)\n    rownames(cfs) = rownames(sup.rows)\n    colnames(cfs) = DimNames\n  }\n  if (ncs > 0) {\n    bs = t(sup.cols) %*% SD$u\n    sc = apply((sup.cols^2), 2, sum)\n    ccs = round((solve(diag(sc)) %*% bs^2) * 100, digits = 2)\n    rownames(ccs) = colnames(sup.cols)\n    colnames(ccs) = DimNames\n  }\n\n  scf = 1\n  \n  Biplot$nrows = n\n  Biplot$ncols = p\n  Biplot$nrowsSup = nfs\n  Biplot$ncolsSup = ncs\n  Biplot$dim = dimension\n  Biplot$EigenValues = EV\n  Biplot$Inertia = Inertia\n  \n  Biplot$CumInertia = CumInertia\n\n  Biplot$Structure = CorrXCP\n  if (nfs == 0) \n    Biplot$RowCoordinates <- a\n  else Biplot$RowCoordinates <- rbind(a, as)\n  if (ncs == 0) \n    Biplot$ColCoordinates <- b\n  else Biplot$ColCoordinates <- rbind(b, bs)\n  \n  # Contributions\n  if (nfs == 0) \n    Biplot$RowContributions <- cf\n  else Biplot$RowContributions <- rbind(cf, cfs)\n  if (ncs == 0) \n    Biplot$ColContributions <- cc\n  else Biplot$ColContributions <- rbind(cc, ccs)\n  Biplot$Scale_Factor = scf\n  Biplot$ClusterType=\"us\"\n  Biplot$Clusters = as.factor(matrix(1,nrow(Biplot$RowContributions), 1))\n  Biplot$ClusterColors=\"blue\"\n  Biplot$ClusterNames=\"Cluster 1\"\n  class(Biplot) <- \"ContinuousBiplot\"\n  return(Biplot)\n}\n\n",
    "created" : 1448876333325.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "449374785",
    "id" : "F0A3E509",
    "lastKnownWriteTime" : 1449136003,
    "path" : "~/Dropbox/0 ProgramasR/Paquetes/MultBiplot/R/FA.Biplot.R",
    "project_path" : "R/FA.Biplot.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}