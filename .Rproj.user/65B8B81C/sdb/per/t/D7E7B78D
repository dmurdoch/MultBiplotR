{
    "collab_server" : "",
    "contents" : "VarBiplot <- function(bi1, bi2, b0=0, xmin = -3, xmax = 3, ymin = -3, ymax = 3, label = \"Point\", mode = \"a\", \n                      CexPoint = 0.8, PchPoint = 1, Color = \"blue\", \n                      ticks = c(-3, -2.5, -2, -1.5, -1, -0.5, 0.5, 1, 1.5, 2, 2.5, 3), ticklabels = round(ticks, digits = 2),\n                      tl = 0.03, ts = \"Complete\", Position=\"Angle\", AddArrow=FALSE, ...) {\n  # mode a= arrows b = both extremes h= half (just the positive part)\n  #      s= scale \n  # Plots a var on a biplot\n\n  b1 = bi1/(bi1^2 + bi2^2)\n  b2 = bi2/(bi1^2 + bi2^2)\n  b = b2/b1\n  x1 = xmin\n  y1 = b * xmin\n  if ((y1 > ymin - 0.001) & (y1 < ymax + 0.001)) \n    if ((x1 * b1 + y1 * b2) < 0) \n      ini = c(x1, y1)\n  else {\n    final = c(x1, y1)\n    markerpos = 2\n    angle = 0\n  }\n  x1 = xmax\n  y1 = b * xmax\n  if ((y1 > ymin - 0.001) & (y1 < ymax + 0.001)) \n    if ((x1 * b1 + y1 * b2) < 0) \n      ini = c(x1, y1)\n  else {\n    final = c(x1, y1)\n    markerpos = 4\n    angle = 0\n  }\n  x1 = ymin/b\n  y1 = ymin\n  if ((x1 > xmin) & (x1 < xmax)) \n    if ((x1 * b1 + y1 * b2) < 0) \n      ini = c(x1, y1)\n  else {\n    final = c(x1, y1)\n    markerpos = 4\n    angle = 270\n  }\n  x1 = ymax/b\n  y1 = ymax\n  if ((x1 > xmin) & (x1 < xmax)) \n    if ((x1 * b1 + y1 * b2) < 0) \n      ini = c(x1, y1)\n  else {\n    final = c(x1, y1)\n    markerpos = 4\n    angle = 90\n  }\n  if (mode == \"p\") {\n    points(bi1, bi2, pch = 16, col = Color, cex = CexPoint, ...)\n    c1 = bi1\n    c2 = bi2\n    if (bi1 < 0) \n      markerpos = 2\n    else markerpos = 4\n    angle = 0\n  }\n  if (mode == \"a\") {\n    arrows(0, 0, bi1, bi2, length = 0.1, angle = 20, col = Color, ...)\n    c1 = bi1\n    c2 = bi2\n    if (bi1 < 0) \n      markerpos = 2\n    else markerpos = 4\n    angle = 0\n  }\n  if (mode == \"ah\") {\n    arrows(0, 0, bi1, bi2, length = 0.1, angle = 20, col = Color, ...)\n    lines(rbind(c(0, 0), final), col = Color, lty=3, ...)\n    c1 = final[1]\n    c2 = final[2]\n  }\n  if (mode == \"b\") {\n    lines(rbind(ini, final), col = Color, ...)\n    arrows(0, 0, bi1, bi2, length = 0.1, angle = 20, col = Color, lwd=2 ,  ...)\n    c1 = final[1]\n    c2 = final[2]\n  }\n  if (mode == \"h\") {\n    lines(rbind(c(0, 0), final), col = Color, ...)\n    c1 = final[1]\n    c2 = final[2]\n  }\n  if (mode == \"s\") {\n    if (ts == \"BoxPlot\") {\n      lty = 3\n    } else {\n      lty = 1\n    }\n    lines(rbind(ini, final), col = Color, lwd = 1, lty = lty, ...)\n    c1 = final[1]\n    c2 = final[2]\n    ang = atan(bi2/bi1) * 180/pi\n    k = length(ticks)\n    M = cbind((ticks - b0) * b1, (ticks - b0) * b2)\n    deltax <- tl * sin(ang * pi/180)\n    deltay <- tl * cos(ang * pi/180)\n    Mn <- cbind(M[, 1] + deltax, M[, 2] - deltay)\n    for (i in 1:k) {\n      if (InBox(M[i, 1], M[i, 2], xmin, xmax, ymin, ymax)) {\n        lines(rbind(M[i, 1:2], Mn[i, 1:2]), col = Color, lwd = 1, ...)\n        text(Mn[i, 1], Mn[i, 2], ticklabels[i], pos = 1, offset = 0.2, cex = 0.5, srt = ang, col = Color, ...)\n      }\n    }\n    if (ts == \"BoxPlot\") {\n      points(M[3, 1], M[3, 2], pch = 16, col = Color, ...)\n      lines(rbind(M[2, ], M[4, ]), col = Color, lwd = 2, lty = 1, ...)\n    }\n  }\n  \n  if (AddArrow) arrows(0, 0, bi1, bi2, length = 0.1, angle = 20, col = Color, lwd = 2, ...)\n  \n  if (Position == 'Angle'){\n    angle=atan(bi2/bi1) * 180/pi\n    if (bi1 < 0) \n      markerpos = 2\n    else markerpos = 4\n   }\n\n  text(c1, c2, label, cex = CexPoint, pos = markerpos, offset = 0.2, srt = angle, col = Color, ...)\n}\n\n",
    "created" : 1467015303515.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1779043574",
    "id" : "D7E7B78D",
    "lastKnownWriteTime" : 1448976632,
    "last_content_update" : 1448976632,
    "path" : "~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/VarBiplot.R",
    "project_path" : "R/VarBiplot.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}