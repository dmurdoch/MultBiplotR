plot(MyMod3$Fitted, MyMod3$Residuals, main=paste("nlminb - R2:", MyMod3$R2))
plot(MyMod3$Fitted, y, main=paste("nlminb - R2:", MyMod3$R2))
plot(MyMod4$Fitted, MyMod4$Residuals, main=paste("Gradiente Conjugado - R2:", MyMod4$R2))
plot(MyMod4$Fitted, y, main=paste("Gradiente Conjugado - R2:", MyMod4$R2))
par(opar)
X1=X[,-1] # Le quito la columna de unos
dim(X1)
library(MultBiplotR)
pcbip=PCA.Biplot(Houses[,1:10])
plot(pcbip, LabelInd=FALSE,  mode="h", MinQualityVar=0, CexInd=0.2, ColorInd = "blue", margin=0.2)
summary(pcbip)
par(opar)
plot(pcbip, LabelInd=FALSE,  mode="h", MinQualityVar=0, CexInd=0.2, ColorInd = "blue", margin=0.2)
opar <- par(mfrow = c(1,1))
plot(pcbip, LabelInd=FALSE,  mode="h", MinQualityVar=0, CexInd=0.2, ColorInd = "blue", margin=0.2)
summary(pcbip)
pcbip2=PCA.Biplot(Houses[,1:10], alpha=0)
plot(pcbip2, LabelInd=FALSE,  mode="h", MinQualityVar=0, CexInd=0.2, ColorInd = "blue", margin=0.2, ShowAxis = TRUE)
summary(pcbip2)
Distancia= sqrt(pcbip2$RowCoordinates[,1]^2+pcbip2$RowCoordinates[,2]^2)
Outliers= which(Distancia>4)
length(Outliers)
Outliers= which(Distancia>3)
length(Outliers)
pcbip3=PCA.Biplot(Houses[-Outliers,1:10], alpha=0)
plot(pcbip3, LabelInd=FALSE,  mode="h", MinQualityVar=0, CexInd=0.2, ColorInd = "blue", margin=0.2,  ShowAxis = TRUE)
Outliers= which(Distancia>2)
length(Outliers)
pcbip3=PCA.Biplot(Houses[-Outliers,1:10], alpha=0)
plot(pcbip3, LabelInd=FALSE,  mode="h", MinQualityVar=0, CexInd=0.2, ColorInd = "blue", margin=0.2,  ShowAxis = TRUE)
plot(pcbip3, LabelInd=FALSE,  mode="h", MinQualityVar=0, CexInd=0.2, ColorInd = as.integer(Houses$condition[-Outliers]), margin=0.2,  ShowAxis = TRUE)
pcbip3=AddCluster2Biplot(pcbip3, ClusterType="us", Groups=Houses$condition[-Outliers])
plot(pcbip3, LabelInd=FALSE,  mode="h", MinQualityVar=0, CexInd=0.2, margin=0.2,  ShowAxis = TRUE, PlotClus = TRUE, ClustLegend = TRUE)
pcbip3=AddCluster2Biplot(pcbip3, ClusterType="us", Groups=Houses$waterfront[-Outliers])
plot(pcbip3, LabelInd=FALSE,  mode="h", MinQualityVar=0, CexInd=0.2, margin=0.2,  ShowAxis = TRUE, PlotClus = TRUE, ClustLegend = TRUE)
plot(pcbip3, LabelInd=FALSE,  mode="h", MinQualityVar=0, CexInd=0.2, margin=0.2,  ShowAxis = TRUE, PlotClus = TRUE, ClustLegend = TRUE, ClustConf = 0.9)
X1=X[,-1] # Le quito la columna de unos
dim(X1)
mifit=PLSR(y,X1, Validation="None")
summary(mifit)
mifit$RegParameters
mibip=Biplot.PLSR(mifit)
summary(mibip)
plot(mibip, IndLabels= wine[,2], mode="s", MinQualityVar=0, PlotSupVars=TRUE, SupMode="s", CexInd=0.2, ColorInd = "blue")
plot(mibip, PlotVars=TRUE, IndLabels = y, ColorInd=y+1)
mifit$RegParameters
mifit$R2
library(caret)
library(dplyr)
library(ggmap)
df <- Casas %>% group_by(zipcode) %>%
summarize(median_price = median(price), transactions = n(),
latitude = mean(lat), longitude = mean(long))
height <- max(Casas$lat) - min(Casas$lat)
width <- max(Casas$long) - min(Casas$long)
King_borders <- c(bottom  = min(Casas$lat)  - 0.1 * height,
top     = max(Casas$lat)  + 0.1 * height,
left    = min(Casas$long) - 0.1 * width,
right   = max(Casas$long) + 0.1 * width)
mapK <- get_stamenmap(King_borders, zoom = 10, maptype = "toner-lite")
ggmap(mapK)
ggmap(mapK) +
geom_point(data = df, mapping = aes(x = longitude, y = latitude,
col = median_price, size = transactions)) +
scale_color_distiller(palette = "YlOrRd", direction = 1)
ggmap(mapK) +
geom_point(data = Casas, mapping = aes(x = long, y = lat,
col = price)) +
scale_color_distiller(palette = "YlOrRd", direction = 1)
qmplot(x = longitude, y = latitude, data = df, maptype = "watercolor",
geom = "point", color = median_price, size = transactions) +
scale_color_gradient(low = "blue", high = "red")
qmplot(x = longitude, y = latitude, data = df, maptype = "terrain-labels",
geom = "point", color = median_price, size = transactions) +
scale_color_gradient(low = "blue", high = "red")
qmplot(x = longitude, y = latitude, data = df, maptype = "toner",
geom = "point", color = median_price, size = transactions) +
scale_color_gradient(low = "blue", high = "red")
install.packages("rminer")
install.packages("nnet")
install.packages("kernlab")
install.packages("e1071")
install.packages("nnet")
install.packages("kernlab")
install.packages("e1071")
install.packages("neuralnet")
library(rminer)
library(nnet)
library(kernlab)
library(neuralnet)
library(MultBiplotR)
wine.nn2 = nnet(price ~ ., data = Houses, size = 2, maxit = 200)
hnn = nnet(price ~ ., data = Houses, size = 2, maxit = 200)
hnn = nnet(price ~ ., data = Houses, size = 2, maxit = 200)
table(Trial$quality, predict(wine.nn2, Trial[,1:11], type = "class"))
predict(wine.nn2, X1)
predict(hnn, X1)
help(nnet)
nn = neuralnet(price ~ ., data=Houses, linear.output = TRUE, hidden = 1)
nn = neuralnet(price ~ ., data=Houses, linear.output = TRUE, hidden = 2)
help(neuralnet)
library(mlbench)
data(BostonHousing)
# inspect the range which is 1-50
summary(BostonHousing$medv)
##
## model linear regression
##
<span class="skimlinks-unlinked">lm.fit</span> <- lm(medv ~ ., data=BostonHousing)
lm.predict <- predict(<span class="skimlinks-unlinked">lm.fit</span>)
# mean squared error: 21.89483
mean((lm.predict - BostonHousing$medv)^2)
plot(BostonHousing$medv, lm.predict,
main="Linear regression predictions vs actual",
xlab="Actual")
##
## model neural network
##
require(nnet)
# scale inputs: divide by 50 to get 0-1 range
<span class="skimlinks-unlinked">nnet.fit</span> <- nnet(medv/50 ~ ., data=BostonHousing, size=2)
# multiply 50 to restore original scale
nnet.predict <- predict(<span class="skimlinks-unlinked">nnet.fit)*50</span>
# mean squared error: 16.40581
mean((nnet.predict - BostonHousing$medv)^2)
plot(BostonHousing$medv, nnet.predict,
main="Neural network predictions vs actual",
xlab="Actual")
library(mlbench)
install.packages("mlbench", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(mlbench)
data(BostonHousing)
summary(BostonHousing$medv)
lm(medv ~ ., data=BostonHousing)
<span class="skimlinks-unlinked">lm.fit</span> <- lm(medv ~ ., data=BostonHousing)
lm.fit lm(medv ~ ., data=BostonHousing)
lm.fit <- lm(medv ~ ., data=BostonHousing)
lm.predict <- predict(lm.fit)
mean((lm.predict - BostonHousing$medv)^2)
plot(BostonHousing$medv, lm.predict,
main="Linear regression predictions vs actual",
xlab="Actual")
nnet.fit<- nnet(medv/50 ~ ., data=BostonHousing, size=2)
BostonHousing$medv
max(BostonHousing$medv)
maximo=max(Houses$price)
maximo
nnet.fit<- nnet(price/maximo ~ ., data=Houses, size=2)
nnet.predict <- predict(nnet.fit)*maximo
mean((nnet.predict - BostonHousing$medv)^2)
mean((nnet.predict - Houses$price)^2)
plot(Houses$price, nnet.predict,
main="Neural network predictions vs actual",
xlab="Actual")
nnet.fit<- nnet(price/maximo ~ ., data=Houses, size=2)
nnet.predict <- predict(nnet.fit)*maximo
nnet.predict
nnet.fit<- nnet(price/maximo ~ ., data=Houses, size=3)
nnet.predict <- predict(nnet.fit)*maximo
nnet.predict
nnet.fit <- nnet(medv/50 ~ ., data=BostonHousing, size=2)
nnet.predict <- predict(nnet.fit)*50
nnet.predict
mean((nnet.predict - BostonHousing$medv)^2)
plot(BostonHousing$medv, nnet.predict,
main="Neural network predictions vs actual",
xlab="Actual")
BostonHousing$medv
nnet.predict
help(neuralnet)
nn <- neuralnet(price ~ ., data=Houses, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
nn <- neuralnet(price ~ ., data=Houses, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
nn <- neuralnet(price ~ ., data=Houses2, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
names(Houses)
nn <- neuralnet(price ~ bedrooms+bathrooms+m2_living+m2_lot+floors+yr_old, data=Houses2, hidden=c(2,1), linear.output=FALSE, threshold=0.01)
"
nn
plot(nn)
nn <- neuralnet(price ~ bedrooms+bathrooms+m2_living+m2_lot+floors+yr_old, data=Houses2, hidden=c(2,1), linear.output=TRUE, threshold=0.01)
url <- 'http://archive.ics.uci.edu/ml/machine-learning-databases/00243/yacht_hydrodynamics.data'
Yacht_Data <- read_table(file = url,
col_names = c('LongPos_COB', 'Prismatic_Coeff',
'Len_Disp_Ratio', 'Beam_Draut_Ratio',
'Length_Beam_Ratio','Froude_Num',
'Residuary_Resist')) %>%
na.omit()
Yacht_Data <- read_table(file = url,
col_names = c('LongPos_COB', 'Prismatic_Coeff',
'Len_Disp_Ratio', 'Beam_Draut_Ratio',
'Length_Beam_Ratio','Froude_Num',
'Residuary_Resist'))
Yacht_Data <- read.table(file = url,
col_names = c('LongPos_COB', 'Prismatic_Coeff',
'Len_Disp_Ratio', 'Beam_Draut_Ratio',
'Length_Beam_Ratio','Froude_Num',
'Residuary_Resist'))
library(tidyverse)
install.packages("tidyverse", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("GGally", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(tidyverse)
library(neuralnet)
library(GGally)
Yacht_Data <- read_table(file = url,
col_names = c('LongPos_COB', 'Prismatic_Coeff',
'Len_Disp_Ratio', 'Beam_Draut_Ratio',
'Length_Beam_Ratio','Froude_Num',
'Residuary_Resist')) %>%
na.omit()
Yacht_Data
ggpairs(Yacht_Data, title = "Scatterplot Matrix of the Features of the Yacht Data Set")
Yacht_NN1 <- neuralnet(Residuary_Resist ~ LongPos_COB + Prismatic_Coeff +
Len_Disp_Ratio + Beam_Draut_Ratio + Length_Beam_Ratio +
Froude_Num, data = Yacht_Data_Train)
Yacht_NN1 <- neuralnet(Residuary_Resist ~ LongPos_COB + Prismatic_Coeff +
Len_Disp_Ratio + Beam_Draut_Ratio + Length_Beam_Ratio +
Froude_Num, data = Yacht_Data)
Yacht_NN1
plot(Yacht_NN1)
scale01 <- function(x){
(x - min(x)) / (max(x) - min(x))
}
Yacht_Data <- Yacht_Data %>%
mutate_all(scale01)
Yacht_Data
Yacht_NN1 <- neuralnet(Residuary_Resist ~ LongPos_COB + Prismatic_Coeff +
Len_Disp_Ratio + Beam_Draut_Ratio + Length_Beam_Ratio +
Froude_Num, data = Yacht_Data_Train)
set.seed(12345)
Yacht_Data_Train <- sample_frac(tbl = Yacht_Data, replace = FALSE, size = 0.80)
Yacht_Data_Test <- anti_join(Yacht_Data, Yacht_Data_Train)
set.seed(12321)
Yacht_NN1 <- neuralnet(Residuary_Resist ~ LongPos_COB + Prismatic_Coeff +
Len_Disp_Ratio + Beam_Draut_Ratio + Length_Beam_Ratio +
Froude_Num, data = Yacht_Data_Train)
Yacht_NN1
HousesData <- Houses %>%
mutate_all(scale01)
HousesData <- Houses %>%
mutate_all(X1)
X1
HousesData <- X1 %>%
mutate_all(scale01)
class(X1)
HousesData <- X1 %>%
mutate_all(scale01)
HousesData <- Houses[,1:10] %>%
mutate_all(scale01)
Yacht_NN1 <- neuralnet(price ~ ,, data = HousesData)
Yacht_NN1 <- neuralnet(price ~ ., data = HousesData)
HousesData
X1
Houses
XX=model.matrix(price ~., data=Houses)
XX
XX=XX[-1,]
XX
XX=XX[-1,]
XX
XX=model.matrix(price ~., data=Houses)
XX=XX[,-1]
XX
XX=cbind(Houses$price, XX[,-1])
XX=model.matrix(price ~., data=Houses)
XX=cbind(Houses$price, XX[,-1])
XX
write.csv(XX, file = "Houses.csv")
thepage = readLines('https://www.emagister.com/master-marketing-digital-direccion-marketing-cursos-3537927.htm')
linea=grep('¿Cuáles son los objetivos de este curso?',thepage)
mypattern ="<p><strong>·&nbsp;¿Cuáles son los objetivos de este curso?</strong></p>"
datalines = grep(mypattern,thepage[754:length(thepage)],value=TRUE)
texto=character()
while (GoOn){
datalines=thepage[linea+1]
}
datalines
X=matrix(runif(30), ncol=3)
X
y=matrix(y,ncol=1)
y=c(1,1,1,1,1,0,0,0,0,0)
y=matrix(y,ncol=1)
y
T3=matrix(runif(3), nrow=1)
X=matrix(runif(30), ncol=3)
y=c(1,1,1,1,1,0,0,0,0,0)
y=matrix(y,ncol=1)
T1=matrix(runif(20), ncol=4)
T2=matrix(runif(12), ncol=6)
T3=matrix(runif(3), nrow=1)
cbind(1,X)
cbind(1,X) %*%T1
T1=matrix(runif(20), ncol=5)
cbind(1,X) %*% T1
Z1=cbind(1,X) %*% T1
A1=1/1+exp(-1*Z1)
A1
Z1=cbind(1,X) %*% t(T1)
A1=matrix(runif(30), ncol=3)
y=c(1,1,1,1,1,0,0,0,0,0)
y=matrix(y,ncol=1)
T1=matrix(runif(20), ncol=4)
T2=matrix(runif(12), ncol=6)
T3=matrix(runif(3), nrow=1)
Z2=cbind(1,A1) %*% t(T1)
A2=1/1+exp(-1*Z1)
Z3=cbind(1,A2) %*% t(T2)
Z3
A3=1/1+exp(-1*Z3)
Z4=cbind(1,A3) %*% t(T3)
A4=1/1+exp(-1*Z4)
A4
Z4
Z2=cbind(1,A1) %*% t(T1)
A2=(1/1+exp(-1*Z1))
Z3=cbind(1,A2) %*% t(T2)
A3=1/(1+exp(-1*Z3))
Z4=cbind(1,A3) %*% t(T3)
A4=1/(1+exp(-1*Z4))
A2
Z2=cbind(1,A1) %*% t(T1)
A2=(1/1+exp(-1*Z1))
A2
Z3
A3=1/(1+exp(-1*Z3))
A3
A2=1/(1+exp(-1*Z1))
A2
Z3=cbind(1,A2) %*% t(T2)
A3=1/(1+exp(-1*Z3))
Z4=cbind(1,A3) %*% t(T3)
A4=1/(1+exp(-1*Z4))
A4
y=c(1,1,1,0,0,0,0,0,0,0,
0,0,0,1,1,1,0,0,0,0,
0,0,0,0,0,0,1,1,1,1)
y=matrix(y,ncol=3)
y
T1=matrix(runif(20), ncol=4)
T2=matrix(runif(12), ncol=6)
T3=matrix(runif(9), nrow=3)
Z2=cbind(1,A1) %*% t(T1)
A2=1/(1+exp(-1*Z1))
Z3=cbind(1,A2) %*% t(T2)
A3=1/(1+exp(-1*Z3))
Z4=cbind(1,A3) %*% t(T3)
A4=1/(1+exp(-1*Z4))
A4
E4=A4-Y
Y=matrix(y,ncol=3)
E4=A4-Y
E4
T3
y=c(1,1,1,0,0,0,0,0,0,0,0,
0,0,0,1,1,1,0,0,0,0,0,
0,0,0,0,0,0,1,1,1,0,0,
0,0,0,0,0,0,0,0,0,1,1
)
Y=matrix(y,ncol=3)
Y=matrix(y,ncol=4)
T1=matrix(runif(20), ncol=4)
T2=matrix(runif(12), ncol=6)
T3=matrix(runif(9), nrow=4)
Z2=cbind(1,A1) %*% t(T1)
A2=1/(1+exp(-1*Z1))
Z3=cbind(1,A2) %*% t(T2)
A3=1/(1+exp(-1*Z3))
Z4=cbind(1,A3) %*% t(T3)
A4=1/(1+exp(-1*Z4))
T3=matrix(runif(12), nrow=4)
Z2=cbind(1,A1) %*% t(T1)
A2=1/(1+exp(-1*Z1))
Z3=cbind(1,A2) %*% t(T2)
A3=1/(1+exp(-1*Z3))
Z4=cbind(1,A3) %*% t(T3)
A4=1/(1+exp(-1*Z4))
E4=A4-Y
A4
hidden=c(5,2,3)
A1=matrix(runif(33), ncol=3)
y=c(1,1,1,0,0,0,0,0,0,0,0,
0,0,0,1,1,1,0,0,0,0,0,
0,0,0,0,0,0,1,1,1,0,0,
0,0,0,0,0,0,0,0,0,1,1
)
Y=matrix(y,ncol=4)
T1=matrix(runif(20), ncol=4)
T2=matrix(runif(12), ncol=6)
T3=matrix(runif(12), nrow=4)
Z2=cbind(1,A1) %*% t(T1)
A2=1/(1+exp(-1*Z1))
Z3=cbind(1,A2) %*% t(T2)
A3=1/(1+exp(-1*Z3))
Z4=cbind(1,A3) %*% t(T3)
A4=1/(1+exp(-1*Z4))
E4=A4-Y
A4
T1
Z2
A2
Z2=cbind(1,A1) %*% t(T1)
A2=1/(1+exp(-1*Z2))
Z3=cbind(1,A2) %*% t(T2)
A3=1/(1+exp(-1*Z3))
Z4=cbind(1,A3) %*% t(T3)
A4=1/(1+exp(-1*Z4))
E4=A4-Y
E4
E4=A4-Y
E3=(A3*(1-A3))
E3
T3
E3
E4
T3
E4 %% T3
E4 %*% T3
(A3*(1-A3))
A3
E3= (cbind(1,A3)*(1-cbind(1,A3)))
E3
E4 %*% T3
E3= (E4 %*% T3)* (cbind(1,A3)*(1-cbind(1,A3)))
E3
E3= (E4 %*% T3)* (cbind(1,A3)*(1-cbind(1,A3)))
E3
E2= (E3 %*% T2)* (cbind(1,A2)*(1-cbind(1,A2)))
T2
E3
(cbind(1,A2)*(1-cbind(1,A2)))
A2
cbind(1,A2)
(cbind(1,A2)*(1-cbind(1,A2)))
(E3 %*% T2)
E3
T2
E4
T3
E4
A3
E4
A4
E4
T3
(E4 %*% T3)
A3
A2
T1=matrix(runif(15), ncol=3)
T2=matrix(runif(10), ncol=5)
T3=matrix(runif(8), nrow=2)
Z2=A1 %*% t(T1)
A2=1/(1+exp(-1*Z2))
Z3=A2 %*% t(T2)
A3=1/(1+exp(-1*Z3))
Z4=A3 %*% t(T3)
T3
A3
T2
A2
A3
T3=matrix(runif(12), ncol=2)
Z2=cbind(1,A1) %*% t(T1)
A2=1/(1+exp(-1*Z2))
Z3=cbind(1,A2) %*% t(T2)
A3=1/(1+exp(-1*Z3))
Z4=cbind(1,A3) %*% t(T3)
T1=matrix(runif(15), ncol=3)
T2=matrix(runif(10), ncol=5)
T3=matrix(runif(8), nrow=2)
Z2=A1 %*% t(T1)
A2=1/(1+exp(-1*Z2))
Z3=A2 %*% t(T2)
A3=1/(1+exp(-1*Z3))
Z4=A3 %*% t(T3)
A3
T1=matrix(runif(15), ncol=3)
T2=matrix(runif(10), ncol=5)
T3=matrix(runif(8), ncol=2)
Z2=A1 %*% t(T1)
A2=1/(1+exp(-1*Z2))
Z3=A2 %*% t(T2)
A3=1/(1+exp(-1*Z3))
Z4=A3 %*% t(T3)
A4=1/(1+exp(-1*Z4))
E4=A4-Y
E3= (E4 %*% T3)* (cbind(1,A3)*(1-cbind(1,A3)))
E4
T3
(E4 %*% T3)
A3
E3= (E4 %*% T3)* (A3*(1-A3))
E2= (E3 %*% T2)* (A2*(1-A2))
A1
A2
A3
A4
E4=A4-Y
E3= (E4 %*% T3)* (A3*(1-A3))
E2= (E3 %*% T2)* (A2*(1-A2))
A1 %* E2
A1 %*% E2
A1
E2
A2 %*% E2
A2
T1
A2
A1
A1 %*% t(E2)
t(A1) %*% E2
t(E2) %*% A1
T1
TT2=t(E3) %*% A2
tt3=t(E4) %*% A3
