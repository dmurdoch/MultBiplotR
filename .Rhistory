p <- ncol(X)
NombreFilas = rownames(X)
NombreCols = colnames(X)
medias = apply(X, 2, mean)
destip = apply(X, 2, sd)
if (center) {
H = diag(n) - matrix(1, n, n)/n
X = H %*% X
}
if (scale) {
S = t(X) %*% X/n
X <- X %*% solve(diag(destip))
}
S = (t(X) %*% X)/(n - 1)
vvp = eigen(S)
inercia = (vvp$values/sum(vvp$values)) * 100
acumulada <- cumsum(inercia)
loadings <- vvp$vectors %*% diag(sqrt(vvp$values))
class(loadings) <- "loadings"
estructura <- cor(X, Y)
resultados <- list(ValProp = vvp$values, VecProp = vvp$vectors, Inercia = inercia, Acumulada = acumulada, Cargas = loadings, Correlaciones = estructura,
Coordenadas = Y)
class(resultados) <- "pca"
resultados$Centrado = centre
resultados$Escalado = scale
return(resultados)
}
Componentes_Principales(X)
Componentes_Principales <- function(X, center = TRUE, scale = TRUE) {
if (is.data.frame(X)) X= as.matrix(X)
n <- nrow(X)
p <- ncol(X)
NombreFilas = rownames(X)
NombreCols = colnames(X)
medias = apply(X, 2, mean)
destip = apply(X, 2, sd)
if (center) {
H = diag(n) - matrix(1, n, n)/n
X = H %*% X
}
if (scale) {
S = t(X) %*% X/n
X <- X %*% solve(diag(destip))
}
S = (t(X) %*% X)/(n - 1)
vvp = eigen(S)
inercia = (vvp$values/sum(vvp$values)) * 100
acumulada <- cumsum(inercia)
loadings <- vvp$vectors %*% diag(sqrt(vvp$values))
class(loadings) <- "loadings"
estructura <- cor(X, Y)
resultados <- list(ValProp = vvp$values, VecProp = vvp$vectors, Inercia = inercia, Acumulada = acumulada, Cargas = loadings, Correlaciones = estructura,
Coordenadas = Y)
class(resultados) <- "pca"
resultados$Centrado = centre
resultados$Escalado = scale
return(resultados)
}
Componentes_Principales(X)
Componentes_Principales <- function(X, center = TRUE, scale = TRUE) {
if (is.data.frame(X)) X= as.matrix(X)
n <- nrow(X)
p <- ncol(X)
NombreFilas = rownames(X)
NombreCols = colnames(X)
medias = apply(X, 2, mean)
destip = apply(X, 2, sd)
if (center) {
H = diag(n) - matrix(1, n, n)/n
X = H %*% X
}
if (scale) {
S = t(X) %*% X/n
X <- X %*% solve(diag(destip))
}
S = (t(X) %*% X)/(n - 1)
vvp = eigen(S)
inercia = (vvp$values/sum(vvp$values)) * 100
acumulada <- cumsum(inercia)
loadings <- vvp$vectors %*% diag(sqrt(vvp$values))
Y=X %*% vvp$vectors
class(loadings) <- "loadings"
estructura <- cor(X, Y)
resultados <- list(ValProp = vvp$values, VecProp = vvp$vectors, Inercia = inercia, Acumulada = acumulada, Cargas = loadings, Correlaciones = estructura,
Coordenadas = Y)
class(resultados) <- "pca"
resultados$Centrado = centre
resultados$Escalado = scale
return(resultados)
}
Componentes_Principales(X)
Componentes_Principales <- function(X, center = TRUE, scale = TRUE) {
if (is.data.frame(X)) X= as.matrix(X)
n <- nrow(X)
p <- ncol(X)
NombreFilas = rownames(X)
NombreCols = colnames(X)
medias = apply(X, 2, mean)
destip = apply(X, 2, sd)
if (center) {
H = diag(n) - matrix(1, n, n)/n
X = H %*% X
}
if (scale) {
S = t(X) %*% X/n
X <- X %*% solve(diag(destip))
}
S = (t(X) %*% X)/(n - 1)
vvp = eigen(S)
inercia = (vvp$values/sum(vvp$values)) * 100
acumulada <- cumsum(inercia)
loadings <- vvp$vectors %*% diag(sqrt(vvp$values))
Y=X %*% vvp$vectors
class(loadings) <- "loadings"
estructura <- cor(X, Y)
resultados <- list(ValProp = vvp$values, VecProp = vvp$vectors, Inercia = inercia, Acumulada = acumulada, Cargas = loadings, Correlaciones = estructura,
Coordenadas = Y)
class(resultados) <- "pca"
resultados$Centrado = center
resultados$Escalado = scale
return(resultados)
}
Componentes_Principales <- function(X, center = TRUE, scale = TRUE) {
if (is.data.frame(X)) X= as.matrix(X)
n <- nrow(X)
p <- ncol(X)
NombreFilas = rownames(X)
NombreCols = colnames(X)
medias = apply(X, 2, mean)
destip = apply(X, 2, sd)
if (center) {
H = diag(n) - matrix(1, n, n)/n
X = H %*% X
}
if (scale) {
S = t(X) %*% X/n
X <- X %*% solve(diag(destip))
}
S = (t(X) %*% X)/(n - 1)
vvp = eigen(S)
inercia = (vvp$values/sum(vvp$values)) * 100
acumulada <- cumsum(inercia)
loadings <- vvp$vectors %*% diag(sqrt(vvp$values))
Y=X %*% vvp$vectors
class(loadings) <- "loadings"
estructura <- cor(X, Y)
resultados <- list(ValProp = vvp$values, VecProp = vvp$vectors, Inercia = inercia, Acumulada = acumulada, Cargas = loadings, Correlaciones = estructura,
Coordenadas = Y)
class(resultados) <- "pca"
resultados$Centrado = center
resultados$Escalado = scale
return(resultados)
}
Componentes_Principales <- function(X, center = TRUE, scale = TRUE) {
if (is.data.frame(X)) X= as.matrix(X)
n <- nrow(X)
p <- ncol(X)
NombreFilas = rownames(X)
NombreCols = colnames(X)
medias = apply(X, 2, mean)
destip = apply(X, 2, sd)
if (center) {
H = diag(n) - matrix(1, n, n)/n
X = H %*% X
}
if (scale) {
S = t(X) %*% X/n
X <- X %*% solve(diag(destip))
}
S = (t(X) %*% X)/(n - 1)
vvp = eigen(S)
inercia = (vvp$values/sum(vvp$values)) * 100
acumulada <- cumsum(inercia)
loadings <- vvp$vectors %*% diag(sqrt(vvp$values))
Y=X %*% vvp$vectors
class(loadings) <- "loadings"
estructura <- cor(X, Y)
resultados <- list(ValProp = vvp$values, VecProp = vvp$vectors, Inercia = inercia, Acumulada = acumulada, Cargas = loadings, Correlaciones = estructura,
Coordenadas = Y)
class(resultados) <- "pca"
resultados$Centrado = center
resultados$Escalado = scale
return(resultados)
}
Componentes_Principales(X)
Componentes_Principales <- function(X, center = TRUE, scale = TRUE) {
if (is.data.frame(X)) X= as.matrix(X)
n <- nrow(X)
p <- ncol(X)
NombreFilas = rownames(X)
NombreCols = colnames(X)
medias = apply(X, 2, mean)
destip = apply(X, 2, sd)
if (center) {
H = diag(n) - matrix(1, n, n)/n
X = H %*% X
}
if (scale) {
S = t(X) %*% X/n
X <- X %*% solve(diag(destip))
}
S = (t(X) %*% X)/(n - 1)
vvp = eigen(S)
inercia = (vvp$values/sum(vvp$values)) * 100
acumulada <- cumsum(inercia)
loadings <- vvp$vectors %*% diag(sqrt(vvp$values))
Y=X %*% vvp$vectors
class(loadings) <- "loadings"
estructura <- cor(X, Y)
resultados <- list(ValProp = vvp$values, VecProp = vvp$vectors, Inercia = inercia, Acumulada = acumulada, Cargas = loadings, Correlaciones = estructura,
Coordenadas = Y)
class(resultados) <- "pca"
resultados$Centrado = center
resultados$Escalado = scale
names(resultados$ValProp)=paste("Comp", 1:p)
return(resultados)
}
Componentes_Principales(X)
help("mod")
??mod
runif
xinstall.packages("plotrix")
install.packages("plotrix")
library("plotrix")
a=c(-1, -1, 1, -1, -1, 1, 1 ,1)
A=matrix(a, ncol=2, byrow=TRUE)
x=seq(0,10, by=0.01)
y=exponencial(x, lambda=1)
plot(x,y, type="l", main=expression(lambda == 1))
exponencial <- function(x, lambda=1){
p=lambda*exp(-1*lambda*x)
return(p)
}
Disexponencial <- function(x, lambda=1){
p=1-exp(-1*lambda*x)
return(p)
}
InvDisexponencial <- function(p, lambda=1){
x=-1*log(1-p)/lambda
return(x)
}
Simulaexponencial<-function(n=100, lambda=1){
p=runif(n)
x=InvDisexponencial(p, lambda=lambda)
return(x)
}
y=exponencial(x, lambda=1)
plot(x,y, type="l", main=expression(lambda == 1))
y=exponencial(x, lambda=0.5)
plot(x,y, type="l", main=expression(lambda == 0.5))
y=exponencial(0, lambda=1)
exponencial(0, lambda=1)
rect(0, 0, 4, 0.5, col="blue")
x=seq(0,10, by=0.01)
y=exponencial(x, lambda=0.5)
plot(x,y, type="l", main=expression(lambda == 0.5))
rect(0, 0, 4, 0.5, border="blue")
a=0
b=4
lambda=0.5
a=0
b=4
lambda=0.5
x=seq(0,10, by=0.01)
y=exponencial(x, lambda=lambda)
plot(x,y, type="l", main=expression(lambda == 0.5))
rect(a, 0, 4, lambda, border="blue")
x=runif(1000)*4
y=runif(1000)*lambda
esp=exponencial(x, lambda=lambda)
esp
colores=rep("blue", n)
a=0
b=4
lambda=0.5
n=1000
x=seq(0,10, by=0.01)
y=exponencial(x, lambda=lambda)
plot(x,y, type="l", main=expression(lambda == 0.5))
rect(a, 0, 4, lambda, border="blue")
x=runif(n)*4
esp=exponencial(x, lambda=lambda)
y=runif(n)*lambda
colores=rep("blue", n)
bajo=y<=esp
bajo
colores[bajo="red"]
points(x,y, col=colores, pch=16, cex=0.5)
colores[bajo="red"]
colores[bajo] ="red"
points(x,y, col=colores, pch=16, cex=0.5)
AreaCuad=(b-a)*lambda
AreaCuad
PropBajo=sum(bajo)/n
PropBajo
Integral=AreaCuad*PropBajo
Integral
??distributions
qexp(4, rate = 0.5, lower.tail = TRUE, log.p = FALSE)
pexp(4, rate = 0.5, lower.tail = TRUE, log.p = FALSE)
print(paste("Valor real", pexp(4, rate = 0.5)))
pexp(0, rate = 0.5)
print(paste("Valor real", Real))
print(paste("Valor estimado", Integral))
Real= pexp(b, rate = lambda) - pexp(a, rate = lambda)
print(paste("Valor real", Real))
print(paste("Valor estimado", Integral))
paste(expression(lambda == ), "-", lambda)
plot(x,y, type="l", main=paste(expression(lambda), "-", lambda))
paste(expression(lambda), "-", lambda)
x=seq(0,10, by=0.01)
y=exponencial(x, lambda=lambda)
plot(x,y, type="l", main=paste(expression(lambda), "-", lambda))
rect(a, 0, 4, lambda, border="blue")
colores=rep("blue", n)
colores[bajo] ="red"
points(x,y, col=colores, pch=16, cex=0.5)}
x=seq(0,10, by=0.01)
y=exponencial(x, lambda=lambda)
plot(x,y, type="l", main=paste(expression(lambda), "-", lambda))
rect(a, 0, 4, lambda, border="blue")
colores=rep("blue", n)
colores[bajo] ="red"
points(x,y, col=colores, pch=16, cex=0.5)
# CÃ¡lculo de la integral
a=0
b=4
lambda=0.5
n=1000
x=runif(n)*4
esp=exponencial(x, lambda=lambda)
y=runif(n)*lambda
bajo=y<=esp
AreaCuad=(b-a)*lambda
PropBajo=sum(bajo)/n
Integral=AreaCuad*PropBajo
Real= pexp(b, rate = lambda) - pexp(a, rate = lambda)
1=seq(0,10, by=0.01)
y1=exponencial(x, lambda=lambda)
plot(x1,y1, type="l", main=paste(expression(lambda), "-", lambda))
rect(a, 0, 4, lambda, border="blue")
colores=rep("blue", n)
colores[bajo] ="red"
points(x,y, col=colores, pch=16, cex=0.5)
x1=seq(0,10, by=0.01)
y1=exponencial(x, lambda=lambda)
plot(x1,y1, type="l", main=paste(expression(lambda), "-", lambda))
rect(a, 0, 4, lambda, border="blue")
colores=rep("blue", n)
colores[bajo] ="red"
points(x,y, col=colores, pch=16, cex=0.5)
x1=seq(0,10, by=0.01)
y1=exponencial(x1, lambda=lambda)
plot(x1,y1, type="l", main=paste(expression(lambda), "-", lambda))
rect(a, 0, 4, lambda, border="blue")
colores=rep("blue", n)
colores[bajo] ="red"
points(x,y, col=colores, pch=16, cex=0.5)
plot(x1,y1, type="l", main=paste(expression(lambda == +), "-", lambda))
plot(x1,y1, type="l", main=paste(expression(lambda), "-", lambda))
plot(x1,y1, type="l", main=paste(Real:, Real, "- Estimado:", Integral))
x1,y1
plot(x1,y1, type="l", main=paste(Real:, Real, "- Estimado:", Integral))
plot(x1,y1, type="l", main=paste("Real:", Real, "- Estimado:", Integral))
plot(x1,y1, type="l", main=paste("Real:", round(Real, digits=3), "- Estimado:", Integral))
rect(a, 0, 4, lambda, border="blue")
colores=rep("blue", n)
colores[bajo] ="red"
points(x,y, col=colores, pch=16, cex=0.5)
IntegralExponencial <- function(a=0, b=4, lambda=0.5, Dibujo=TRUE){
x=runif(n)*4
esp=exponencial(x, lambda=lambda)
y=runif(n)*lambda
bajo=y<=esp
AreaCuad=(b-a)*lambda
PropBajo=sum(bajo)/n
Integral=AreaCuad*PropBajo
Real= pexp(b, rate = lambda) - pexp(a, rate = lambda)
print(paste("Valor real", Real))
print(paste("Valor estimado", Integral))
if (Dibujo){
x1=seq(0,10, by=0.01)
y1=exponencial(x1, lambda=lambda)
plot(x1,y1, type="l", main=paste("Real:", round(Real, digits=3), "- Estimado:", Integral))
rect(a, 0, 4, lambda, border="blue")
colores=rep("blue", n)
colores[bajo] ="red"
points(x,y, col=colores, pch=16, cex=0.5)
}
return(Integral)
}
plot(x1,y1, type="l", main=paste("Real:", round(Real, digits=3), "- Estimado:", Integral), xlab=paste("n:", n))
plot(x1,y1, type="l", main=paste("Real:", round(Real, digits=3), "- Estimado:", Integral), xlab=paste("n:", n), ylab="p")
rect(a, 0, 4, lambda, border="blue")
colores=rep("blue", n)
colores[bajo] ="red"
points(x,y, col=colores, pch=16, cex=0.5)
IntegralExponencial <- function(a=0, b=4, lambda=0.5, n=1000, Dibujo=TRUE){
x=runif(n)*4
esp=exponencial(x, lambda=lambda)
y=runif(n)*lambda
bajo=y<=esp
AreaCuad=(b-a)*lambda
PropBajo=sum(bajo)/n
Integral=AreaCuad*PropBajo
Real= pexp(b, rate = lambda) - pexp(a, rate = lambda)
print(paste("Valor real", Real))
print(paste("Valor estimado", Integral))
if (Dibujo){
x1=seq(0,10, by=0.01)
y1=exponencial(x1, lambda=lambda)
plot(x1,y1, type="l", main=paste("Real:", round(Real, digits=3), "- Estimado:", Integral), xlab=paste("n:", n), ylab="p")
rect(a, 0, 4, lambda, border="blue")
colores=rep("blue", n)
colores[bajo] ="red"
points(x,y, col=colores, pch=16, cex=0.5)
}
return(Integral)
}
IntegralExponencial(a=a, b=b, lambda=lambda, n=n, Dibujo=TRUE)
n=10000
IntegralExponencial(a=a, b=b, lambda=lambda, n=n, Dibujo=TRUE)
n=100000
IntegralExponencial(a=a, b=b, lambda=lambda, n=n, Dibujo=TRUE)
x1=seq(0,10, by=0.01)
y1=exponencial(x1, lambda=lambda)
polygon(x1,y1, col ="blue")
plot(x1,y1, type="l", main=paste("Real:", round(Real, digits=3), "- Estimado:", Integral), xlab=paste("n:", n), ylab="p")
polygon(x1,y1, col ="blue")
x1=seq(0,10, by=0.01)
y1=exponencial(x1, lambda=lambda)
plot(x1,y1, type="l", main="DistribuciÃ³n Exponencial")
x1=seq(0,4, by=0.01)
y1=exponencial(x1, lambda=lambda)
polygon(x1,y1, col ="blue")
help(polygon)
polygon(c(0,x1),c(0,y1), col ="blue")
polygon(c(0,x1, 0),c(0,y1, a), col ="blue")
x1=seq(0,10, by=0.01)
y1=exponencial(x1, lambda=lambda)
plot(x1,y1, type="l", main="DistribuciÃ³n Exponencial")
x1=seq(0,4, by=0.01)
y1=exponencial(x1, lambda=lambda)
polygon(c(0,x1, 0),c(0,y1, a), col ="blue")
polygon(c(0,x1, a),c(0,y1, 0), col ="blue")
a
polygon(c(0,x1, b),c(0,y1, 0), col ="blue")
x1=seq(0,10, by=0.01)
y1=exponencial(x1, lambda=lambda)
plot(x1,y1, type="l", main="DistribuciÃ³n Exponencial")
x1=seq(0,4, by=0.01)
y1=exponencial(x1, lambda=lambda)
polygon(c(0,x1, b),c(0,y1, 0), col ="red")
a=6
b=10
lambda=0.5
n=100000
IntegralExponencial(a=a, b=b, lambda=lambda, n=n, Dibujo=TRUE)
IntegralExponencial <- function(a=0, b=4, lambda=0.5, n=1000, Dibujo=TRUE){
x=runif(n)*b
esp=exponencial(x, lambda=lambda)
y=runif(n)*lambda
bajo=y<=esp
AreaCuad=(b-a)*lambda
PropBajo=sum(bajo)/n
Integral=AreaCuad*PropBajo
Real= pexp(b, rate = lambda) - pexp(a, rate = lambda)
print(paste("Valor real", Real))
print(paste("Valor estimado", Integral))
if (Dibujo){
x1=seq(0,10, by=0.01)
y1=exponencial(x1, lambda=lambda)
plot(x1,y1, type="l", main=paste("Real:", round(Real, digits=3), "- Estimado:", Integral), xlab=paste("n:", n), ylab="p")
rect(a, 0, b, lambda, border="blue")
colores=rep("blue", n)
colores[bajo] ="red"
points(x,y, col=colores, pch=16, cex=0.5)
}
return(Integral)
}
a=6
b=10
lambda=0.5
n=100000
IntegralExponencial(a=a, b=b, lambda=lambda, n=n, Dibujo=TRUE)
IntegralExponencial <- function(a=0, b=4, lambda=0.5, n=1000, Dibujo=TRUE){
x=runif(n)*(b-a) + a
esp=exponencial(x, lambda=lambda)
y=runif(n)*lambda
bajo=y<=esp
AreaCuad=(b-a)*lambda
PropBajo=sum(bajo)/n
Integral=AreaCuad*PropBajo
Real= pexp(b, rate = lambda) - pexp(a, rate = lambda)
print(paste("Valor real", Real))
print(paste("Valor estimado", Integral))
if (Dibujo){
x1=seq(0,10, by=0.01)
y1=exponencial(x1, lambda=lambda)
plot(x1,y1, type="l", main=paste("Real:", round(Real, digits=3), "- Estimado:", Integral), xlab=paste("n:", n), ylab="p")
rect(a, 0, b, lambda, border="blue")
colores=rep("blue", n)
colores[bajo] ="red"
points(x,y, col=colores, pch=16, cex=0.5)
}
return(Integral)
}
a=6
b=10
lambda=0.5
n=100000
IntegralExponencial(a=a, b=b, lambda=lambda, n=n, Dibujo=TRUE)
