par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
alpha=0.001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
A=matrix(rnorm(n*r), n, r)
B=matrix(rnorm(p*r), p, r)
par=c(vec(A), vec(B))
alpha=0.0001
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
JUnfolding(par, D, r)}
for (i in 1:1000){
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
}
JUnfolding(par, D, r)
for (i in 1:2000){
par= par + alpha * grUnfolding(par, D, r)
JUnfolding(par, D, r)
}
JUnfolding(par, D, r)
par
alpha=0.00001
for (i in 1:2000){
par= par + alpha * grUnfolding(par, D, r)
print(JUnfolding(par, D, r))
}
A=matrix(rnorm(n*r), n, r)
B=matrix(rnorm(p*r), p, r)
par=c(vec(A), vec(B))
alpha=0.00001
for (i in 1:2000){
par= par + alpha * grUnfolding(par, D, r)
print(JUnfolding(par, D, r))
}
for (i in 1:12000){
par= par + alpha * grUnfolding(par, D, r)
print(JUnfolding(par, D, r))
}
par
alpha=0.000001
for (i in 1:12000){
par= par + alpha * grUnfolding(par, D, r)
print(JUnfolding(par, D, r))
}
A=matrix(rnorm(n*r), n, r)
B=matrix(rnorm(p*r), p, r)
par=c(vec(A), vec(B))
alpha=0.000001
for (i in 1:12000){
par= par + alpha * grUnfolding(par, D, r)
print(JUnfolding(par, D, r))
}
par
A=matrix(par[1:(n*r)],n,r)
B=matrix(par[(n*r+1):((n+p)*r)], p, r)
rownames(A)=rownames(P)
rownames(B)=colnames(P)
coor=rbind(A,B)
plot(coor[,1],coor[,2],cex=0.2, asp=1)
text(coor[,1],coor[,2], c(rownames(A), rownames(B)), pos=3)
grUnfolding(par, D, r)
for (i in 1:12000){
par= par + alpha * grUnfolding(par, D, r)
print(JUnfolding(par, D, r))
}
par
A=matrix(par[1:(n*r)],n,r)
B=matrix(par[(n*r+1):((n+p)*r)], p, r)
rownames(A)=rownames(P)
rownames(B)=colnames(P)
coor=rbind(A,B)
plot(coor[,1],coor[,2],cex=0.2, asp=1)
text(coor[,1],coor[,2], c(rownames(A), rownames(B)), pos=3)
alpha=0.00001
for (i in 1:12000){
par= par + alpha * grUnfolding(par, D, r)
print(JUnfolding(par, D, r))
}
par
JUnfolding(par, D, r)
A=matrix(rnorm(n*r), n, r)
B=matrix(rnorm(p*r), p, r)
par=c(vec(A), vec(B))
alpha=0.00001
for (i in 1:12000){
par= par + alpha * grUnfolding(par, D, r)
print(JUnfolding(par, D, r))
}
A=matrix(rnorm(n*r), n, r)
B=matrix(rnorm(p*r), p, r)
par=c(vec(A), vec(B))
alpha=0.00001
for (i in 1:12000){
par= par - alpha * grUnfolding(par, D, r)
print(JUnfolding(par, D, r))
}
grUnfolding(par, D, r)
par
A=matrix(par[1:(n*r)],n,r)
B=matrix(par[(n*r+1):((n+p)*r)], p, r)
rownames(A)=rownames(P)
rownames(B)=colnames(P)
coor=rbind(A,B)
plot(coor[,1],coor[,2],cex=0.2, asp=1)
text(coor[,1],coor[,2], c(rownames(A), rownames(B)), pos=3)
DD = DistUnfold(A, B)
cor(c(D), c(DD))
grUnfolding(par, D, r)
A = res$conf.row
B = res$conf.col
par=c(vec(A), vec(B))
grUnfolding(par, D, r)
alpha=0.00001
for (i in 1:12000){
par= par - alpha * grUnfolding(par, D, r)
print(JUnfolding(par, D, r))
}
A = res$conf.row
B = res$conf.col
par=c(vec(A), vec(B))
for (i in 1:2000){
par= par - alpha * grUnfolding(par, D, r)
print(JUnfolding(par, D, r))
}
A=matrix(par[1:(n*r)],n,r)
B=matrix(par[(n*r+1):((n+p)*r)], p, r)
rownames(A)=rownames(P)
rownames(B)=colnames(P)
coor=rbind(A,B)
plot(coor[,1],coor[,2],cex=0.2, asp=1)
text(coor[,1],coor[,2], c(rownames(A), rownames(B)), pos=3)
A=matrix(rnorm(n*r), n, r)
B=matrix(rnorm(p*r), p, r)
X=A
Y=B
par=c(vec(A), vec(B))
resbip <- optim(par, JUnfolding, grUnfolding, D, r=r, method = "Nelder-Mead", hessian = FALSE, control=list(maxit=10000, trace=2))
par=resbip$par
A=matrix(par[1:(n*r)],n,r)
B=matrix(par[(n*r+1):((n+p)*r)], p, r)
rownames(A)=rownames(P)
rownames(B)=colnames(P)
coor=rbind(A,B)
plot(coor[,1],coor[,2],cex=0.2, asp=1)
text(coor[,1],coor[,2], c(rownames(A), rownames(B)), pos=3)
grUnfolding(par, D, r)
library(MultBiplotR)
help("PCA.Biplot")
data(Protein)
bip=PCA.Biplot(Protein[,3:11])
plot(bip)
plot(bip, mode="s", margin=0.2)
plot(bip, mode="s", margin=0.2, dp=1)
Protein
bip$ColContributions
help("plot.ContinuousBiplot")
ColorVar=rep("black",9)
ColorVar
ColorVar=c("green",rep("black",8))
ColorVar
plot(bip, mode="s", margin=0.2, dp=1, ColorVar=ColorVar)
ColorVar=c("blue",rep("black",8))
plot(bip, mode="s", margin=0.2, dp=1, ColorVar=ColorVar)
data(spiders)
x2=Dataframe2BinaryMatrix(spiders)
colnames(x2)=colnames(spiders)
dist=BinaryProximities(x2)
pco=PrincipalCoordinates(dist)
pcobip=ExternalBinaryLogisticBiplot(pco)
plot(pcobip)
plot(pcobip, mode="a")
plot(pcobip, Mode="a")
library(MultBiplotR)
install.packages("CluMix")
library(CluMix)
install.packages("marray")
source("https://bioconductor.org/biocLite.R")
biocLite("marray")
install.packages("CluMix")
data(mixdata)
library(CluMix)
data(mixdata)
mixdata
S <- similarity.subjects(mixdata)
S
dend <- dendro.subjects(mixdata, weights=w)
plot(dend)
dend <- dendro.subjects(mixdata)
plot(dend)
cars
library(MultBiplotR)
wine
library(MultBiplotR)
wine
dim(wine)
X=wine[,4:21]
X
y=wine[,2]
y
as.numeric(wine[,2])
y=as.numeric(wine[,2])-1
y
PLSR1BinFit(y, X, penalization = 0.1)
winePLSbip=biplot.PLSR1BIN(PLSwine)
PLSwine=PLSR1BinFit(y, X, penalization = 0.1)
winePLSbip=biplot.PLSR1BIN(PLSwine)
plot(winePLSbip,  ColorInd=y+2, mode="h", MinQualityVar=0.2, PlotSupVars=T, SupMode="s", ShowBox=T)
plot(winePLSbip,  ColorInd=y+2, mode="s", MinQualityVar=0.2, PlotSupVars=T, SupMode="s", ShowBox=T)
ColContributionPlot(winePLSbip, cex=0.4)
ColContributionPlot(winePLSbip, cex=0.9)
PLSwine=PLSR1BinFit(y, X, penalization = 0.0)
winePLSbip=biplot.PLSR1BIN(PLSwine)
plot(winePLSbip,  ColorInd=y+2, mode="s", MinQualityVar=0.2, PlotSupVars=T, SupMode="s", ShowBox=T)
ColContributionPlot(winePLSbip, cex=0.9)
library(MultBiplotR)
wine
dim(wine)
X=wine[,4:21]
y=as.numeric(wine[,2])-1
y
PLSwine=PLSR1BinFit(y, X, penalization = 0.0)
winePLSbip=biplot.PLSR1BIN(PLSwine)
plot(winePLSbip,  ColorInd=y+2, mode="s", MinQualityVar=0.2, PlotSupVars=T, SupMode="s", ShowBox=T)
ColContributionPlot(winePLSbip, cex=0.9)
help(wine)
colnames(wine)
y2=as.numeric(wine[,1])-1
y2
y2=as.numeric(wine[,1])-1
y2
PLSwine2=PLSR1BinFit(y2, X, penalization = 0.0)
winePLSbip2=biplot.PLSR1BIN(PLSwine2)
plot(winePLSbip2,  ColorInd=y+2, mode="s", MinQualityVar=0.2, PlotSupVars=T, SupMode="s", ShowBox=T)
ColContributionPlot(winePLSbip2, cex=0.9)
PLSwine2=PLSR1BinFit(y2, X, penalization = 0.02)
winePLSbip2=biplot.PLSR1BIN(PLSwine2)
plot(winePLSbip2,  ColorInd=y+2, mode="s", MinQualityVar=0.2, PlotSupVars=T, SupMode="s", ShowBox=T)
plot(winePLSbip2,  ColorInd=y2+2, mode="s", MinQualityVar=0.2, PlotSupVars=T, SupMode="s", ShowBox=T)
help("plot.ContinuousBiplot")
plot(winePLSbip2,  ColorInd=y2+2, IndLabels= wine[,1], mode="s", MinQualityVar=0.2, PlotSupVars=T, SupMode="s", ShowBox=T)
plot(winePLSbip,  ColorInd=y+2, IndLabels= wine[,2], mode="s", MinQualityVar=0.2, PlotSupVars=T, SupMode="s", ShowBox=T)
ColContributionPlot(winePLSbip, cex=2)
ColContributionPlot(winePLSbip, cex=1)
model <- glm(wine[,2] ~X,family=binomial(link='logit')
PLSwine=PLSR1BinFit(y, X, penalization = 0.0)
winePLSbip=biplot.PLSR1BIN(PLSwine)
plot(winePLSbip,  ColorInd=y+2, IndLabels= wine[,2], mode="s", MinQualityVar=0.2, PlotSupVars=T, SupMode="s", ShowBox=T)
ColContributionPlot(winePLSbip, cex=1)
y2=as.numeric(wine[,1])-1
y2
PLSwine2=PLSR1BinFit(y2, X, penalization = 0.02)
winePLSbip2=biplot.PLSR1BIN(PLSwine2)
plot(winePLSbip2,  ColorInd=y2+2, IndLabels= wine[,1], mode="s", MinQualityVar=0.2, PlotSupVars=T, SupMode="s", ShowBox=T)
ColContributionPlot(winePLSbip2, cex=0.9)
model <- glm(wine[,2] ~X,family=binomial(link='logit')
PLSwine=PLSR1BinFit(y, X, penalization = 0.0)
winePLSbip=biplot.PLSR1BIN(PLSwine)
plot(winePLSbip,  ColorInd=y+2, IndLabels= wine[,2], mode="s", MinQualityVar=0.2, PlotSupVars=T, SupMode="s", ShowBox=T)
ColContributionPlot(winePLSbip, cex=1)
y2=as.numeric(wine[,1])-1
y2
PLSwine2=PLSR1BinFit(y2, X, penalization = 0.02)
winePLSbip2=biplot.PLSR1BIN(PLSwine2)
plot(winePLSbip2,  ColorInd=y2+2, IndLabels= wine[,1], mode="s", MinQualityVar=0.2, PlotSupVars=T, SupMode="s", ShowBox=T)
ColContributionPlot(winePLSbip2, cex=0.9)
model <- glm(wine[,2] ~X,family=binomial(link='logit'))
model <- glm(wine[,2] ~ as.matrix(X),family=binomial(link='logit'))
model
X=as.matrix(wine[,4:21])
y=as.numeric(wine[,2])-1
y
model <- glm(wine[,2] ~ X,family=binomial(link='logit'))
model
summary(model)
colnames(wine[,4:21])
colnames(X)= colnames(wine[,4:21])
model <- glm(wine[,2] ~ X,family=binomial(link='logit'))
summary(model)
colnames(wine[,4:21])
data(wine)
wine
wine2=wine(-c(1,3))
wine2=wine[-c(1,3)]
wine2
model <- glm(Origin ~ .,family=binomial(link='logit'), data="wine2")
model <- glm(Origin ~ .,family=binomial(link='logit'), data=wine2)
library(MultBiplotR)
wine
dim(wine)
X=as.matrix(wine[,4:21])
colnames(X)= colnames(wine[,4:21])
y=as.numeric(wine[,2])-1
y
PLSwine=PLSR1BinFit(y, X, penalization = 0.0)
winePLSbip=biplot.PLSR1BIN(PLSwine)
plot(winePLSbip,  ColorInd=y+2, IndLabels= wine[,2], mode="a", MinQualityVar=0.2, PlotSupVars=T, SupMode="s", ShowBox=T)
plot(winePLSbip,  ColorInd=y+2, IndLabels= wine[,2], mode="h", MinQualityVar=0.2, PlotSupVars=T, SupMode="s", ShowBox=T)
