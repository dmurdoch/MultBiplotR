}
cat("\n\n RELATIVE CONTRIBUTIONS OF THE FACTOR TO THE ELEMENT\n")
cat("\n Row Contributions \n")
print(round(object$RowContributions, digits=2))
cat("\n Column Contributions \n")
print(round(object$ColContributions, digits=2))
cat("\n\n\n Qualities of representation of the rows (Cummulative contributions) \n")
print(round(t(apply(object$RowContributions,1, cumsum)), digits=2))
cat("\n\n\n Qualities of representation of the columns (Cummulative contributions) \n")
print(round(t(apply(object$ColContributions,1, cumsum)), digits=2))
if (latex){
print(xtable(pp, caption="Explained Variance"))
print(xtable(round(object$RowContributions, digits=2), caption="Row Contributions Factor to element"))
print(xtable(round(object$ColContributions, digits=2), caption="Column Contributions Factor to element"))
}
}
paquetes
setwd("~/Desktop")
save(paquetes, file="paquetes.rda")
View(paquetes)
View(paquetes)
install.packages(paquetes)
install.packages(paquetes)
install.packages(paquetes)
0:3
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/ExternalBinaryLogisticBiplot.R')
library("MultBiplotR", lib.loc="~/Library/R/4.0/library")
data(spiders)
x2=Dataframe2BinaryMatrix(spiders)
colnames(x2)=colnames(spiders)
dist=BinaryProximities(x2)
pco=PrincipalCoordinates(dist)
pcobip=ExternalBinaryLogisticBiplot(pco)
pcobip$ColumnParameters
colnames(Pco$ColumnParameters)=paste("b",0:dimens, sep="")
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/ExternalBinaryLogisticBiplot.R')
pcobip=ExternalBinaryLogisticBiplot(pco)
pcobip$ColumnParameters
install.packages("fpca")
library("fpca", lib.loc="~/Library/R/4.0/library")
install.packages("fda")
library("fda", lib.loc="~/Library/R/4.0/library")
remove.packages("fda", lib="~/Library/R/4.0/library")
library("fda", lib.loc="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
daybasis65 <- create.fourier.basis(c(0, 365), nbasis=65, period=365)
daybasis65
harmaccelLfd <- vec2Lfd(c(0,(2*pi/365)^2,0), c(0, 365))
harmaccelLfd
harmfdPar     <- fdPar(daybasis65, harmaccelLfd, lambda=1e5)
daytempfd <- smooth.basis(day.5, CanadianWeather$dailyAv[,,"Temperature.C"],
daybasis65, fdnames=list("Day", "Station", "Deg C"))$fd
daytemppcaobj <- pca.fd(daytempfd, nharm=4, harmfdPar)
daytemppcaVarmx <- varmx.pca.fd(daytemppcaobj)
op <- par(mfrow=c(2,2))
daytempfd
plot.pca.fd(daytemppcaobj, cex.main=0.9)
plot.pca.fd(daytemppcaVarmx, cex.main=0.9)
par(op)
plot(daytemppcaobj$harmonics)
plot(daytemppcaVarmx$harmonics)
library(MultBiplotR)
library(MultBiplotR)
library(MultBiplotR)
library(MultBiplotR, lib.loc = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
detach("package:MultBiplotR", unload = TRUE)
library(MultBiplotR, lib.loc = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
remove.packages("MultBiplotR", lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
RAPD
dist=BinaryProximities(RAPD)
pco=PrincipalCoordinates(dist)
pcobip=ExternalBinaryLogisticBiplot(pco)
plot(pco)
plot(pco)
plot(pco, cex=0.7)
plot(pco, CexInd=1)
class(pco)
help(plot.Principal.Coordinates)
plot(pco, RowCex=0.7)
plot(pco, RowCex=0.7, ShowBox=TRUE)
plot(pco, RowCex=0.7, ShowBox=TRUE, margin=0.1)
plot(pco, RowCex=0.7)
summary(pco)
pco=AddCluster2Biplot(pco, NGroups = 3, ClusterType = "hi")
plot(pco, RowCex=0.7, PlotClus = TRUE, TypeClus = "ch")
pco
names(pco)
plot(pco$Dendrogram)
library(MultBiplotR)
library(MultBiplotR)
library(MultBiplotR)
library(MultBiplotR)
X=as.matrix(wine[,4:21])
colnames(X)= colnames(wine[,4:21])
y=as.numeric(wine[,2])-1
PLSwine=PLSR1BinFit(y, X, S=2,penalization = 0.1)
summary(PLSwine)
y
X
PLSwine=PLSR1Bin(y, X, S=2,penalization = 0.1)
summary(PLSwine)
X=as.matrix(wine[,4:21])
colnames(X)= colnames(wine[,4:21])
y=as.numeric(wine[,2])-1
PLSwine=PLSR1Bin(y, X, S=2,penalization = 0.1)
summary(PLSwine)
plot(PLSwine)
class(PLSwine)
Biplot.PLSR1BIN(PLSwine)
plsr=PLSwine
X=plsr$X
Y=plsr$Y
I=dim(X)[1]
J=dim(X)[2]
K=dim(Y)[2]
S=dim(plsr$XScores)[2]
Biplot = list()
Biplot$Title = " PLSR - Biplot"
Biplot$Type = "PLSR"
Biplot$alpha=0
Biplot$Dimension=S
Biplot$Initial_Transformation=plsr$Initial_Transformation
Biplot$ncols=J
Biplot$nrows=I
Biplot$dim=S
Biplot$Means = apply(X, 2, mean)
Biplot$Medians = apply(X, 2, median)
Biplot$Deviations = apply(X, 2, sd)
if (plsr$Initial_Transformation == "Within groups standardization")  Biplot$Deviations = plsr$Deviations
Biplot$Minima = apply(X, 2, min)
Biplot$Maxima = apply(X, 2, max)
Biplot$P25 = apply(X, 2, quantile)[2, ]
Biplot$P75 = apply(X, 2, quantile)[4, ]
a=plsr$XScores
b=plsr$XLoadings
sca = sum(a^2)
scb = sum(b^2)
sca = sca/I
scb = scb/J
scf = sqrt(sqrt(scb/sca))
a = a * scf
b = b/scf
Biplot$RowCoordinates = a
Biplot$ColCoordinates = b
Cont=CalculateContributions(plsr$ScaledX,plsr$XScores,  plsr$XLoadings )
Biplot$Inertia=Cont$Fit*100
Biplot$RowContributions=Cont$RowContributions
StResponse=cor(plsr$BinaryFit$linterm, plsr$XScores)
rownames(StResponse)="Response"
Biplot$Structure=Cont$Structure
Biplot$ColContributions=Cont$ColContributions
Biplot$SupStructure=StResponse
Biplot$SupColContributions=StResponse^2
class(Biplot)="ContinuousBiplot"
Biplot=AddBinVars2Biplot(Biplot, plsr$Y, penalization=plsr$penalization, tolerance = plsr$tolerance, maxiter = plsr$maxiter, IncludeConst=plsr$IncludeConst)
return(Biplot)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/biplot.PLSR1BIN.R')
Biplot.PLSR1BIN(PLSwine)
plsbiplot=Biplot.PLSR1BIN(PLSwine)
plot(plsbiplot)
AddCluster2Biplot(plsbiplot, ClusterType = "us", Groups=y)
AddCluster2Biplot(plsbiplot, ClusterType = "us", Groups=wine$Origin)
plsbiplot=AddCluster2Biplot(plsbiplot, ClusterType = "us", Groups=wine$Origin)
plot(plsbiplot)
plot(plsbiplot, Plot)
heLP(plot.ContinuousBiplot)
help(plot.ContinuousBiplot)
plot(plsbiplot, PlotClus = T)
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, echo=FALSE, message=FALSE, tidy=FALSE)
Library(MultBiplotR)
library(MultBiplotR)
newtest=read.spss("Nuevo test.sav", to.data.frame = TRUE)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/# 0 Test del Reloj/Nuevo test")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/# 0 Test del Reloj/Nuevo test")
newtest=read.spss("Nuevo test.sav", to.data.frame = TRUE)
library(foreign)
library(knitr)
library(table1)
library(boot)
library(ggplot2)
library(ggmosaic)
library(vcd)
library(DescTools)
library(car)
library(kableExtra)
library(gtsummary)
library(tableone)
# library("xlsx")
library(haven)
library(tab)
library("printr")
library(gt)
library(caret)
library(MultBiplotR)
newtest=read.spss("Nuevo test.sav", to.data.frame = TRUE)
names(newtest)=c("Diagnostic", "EducationLevel", "Improvement", "Age", "Sex", "CDT_O_Contour",
"CDT_O_Numbers", "CDT_O_Time", "CDT_O_Total", "CDT_C_Contour", "CDT_C_Numbers",
"CDT_C_Time", "CDT_C_Total", "MMSE", "Year", "Season", "Day_Month",
"Day_Week", "Month", "Region", "Province", "City", "Hospital",
"Floor", "FirstWord", "SecondWord", "ThirdWord", "N93_O", "N86_D", "N79_N",
"N72_U", "N65_M", "FirstWord_R", "SecondWord_R", "ThirdWord_R", "Pencil",
"Clock", "NadaDeSies", "Take", "Fold", "Floor", "CloseEyes",
"Sentence", "Penthagons", "Age_groups", "Words_R", "Improvement_Pattern", "New_test",
"Diag_Bin", "New_test_2", "Wrong_Words")
newtest$Diagnostic=droplevels(newtest$Diagnostic)
levels(newtest$Diagnostic)=c("Normal", "MCI", "AD")
levels(newtest$Sex)=c("Male", "Female")
newtest$Improvement_Pattern=factor(newtest$Improvement_Pattern, labels = c("No", "Yes"))
levels(newtest$Diag_Bin)=c("Normal", "CI")
newtest$Wrong_Words=factor(newtest$Wrong_Words)
write_sav(newtest, "newtest.sav")
Tablaselecc <- newtest  %>% select(Diag_Bin, Age, Sex , Age_groups)
table2 <-
tbl_summary(
Tablaselecc,
by = Diag_Bin, # split table by group
missing = "no", # don't list missing data separately
percent="row",
statistic=list(all_continuous() ~ "{mean} ({sd})", all_categorical() ~ "{n} ({p}%)"),
label = list(Diag_Bin ~ "Diagnostic group"),
digits = list(Diag_Bin ~ 2)
) %>%
modify_header(label = "**Variable**") %>% # update the column header
bold_labels()%>% add_p()
table2
Tablaselecc2 <- newtest  %>% select(Wrong_Words, Improvement_Pattern, Diag_Bin)
table3 <-
tbl_summary(
Tablaselecc2,
by = Diag_Bin, # split table by group
missing = "no", # don't list missing data separately
percent="col",
statistic=list(all_continuous() ~ "{mean} ({sd})", all_categorical() ~ "{n} ({p}%)"),
label = list(Diag_Bin ~ "Diagnostic group"),
digits = list(Diag_Bin ~ 2, Wrong_Words~2, Improvement_Pattern~2),
type=list(c(Improvement_Pattern) ~ "categorical")
) %>%
modify_header(label = "**Variable**") %>% # update the column header
bold_labels()%>% add_p()
table3
```{r}
help("model.matrix")
help("model.frame")
model.frame((Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
model.frame(Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
model.matrix(Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
is.formula
lm
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(Diag_Bin ~ Improvement_Pattern*Wrong_Words)
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
help(model.extract)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
names(y)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
print(class(y))
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
y
Tablaselecc$Diag_Bin
Factor2Binary(Tablaselecc$Diag_Bin)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
pepe=RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
summary(pepe)
class(pepe)
prop.table()
help("prop.table")
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/summary.RidgeBinaryLogistic.R')
summary(pepe)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/summary.RidgeBinaryLogistic.R')
summary(pepe)
pepe2=RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern+Wrong_Words, data=Tablaselecc2)
summary(pepe2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/summary.RidgeBinaryLogistic.R')
summary(pepe2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
pepe2=RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern+Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
pepe2=RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern+Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
pepe2=RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern+Wrong_Words, data=Tablaselecc2)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
pepe2=RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern+Wrong_Words, data=Tablaselecc2)
summary(pepe2)
anova(pepe2,pepe)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/anova.RidgeBinaryLogistic.R')
anova.RidgeBinaryLogistic <- function(m1, m2=NULL){
print("Estoy en ello")
}
anova(pepe2,pepe)
anova.lm
model.extract()
help(model.extract)
terms(y ~ x + x:z + s(x), specials = "s", keep.order = TRUE)
names(pepe)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/anova.RidgeBinaryLogistic.R')
help("distributions")
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/anova.RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/anova.RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/anova.RidgeBinaryLogistic.R')
anova(pepe2,pepe)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/anova.RidgeBinaryLogistic.R')
anova(pepe2,pepe)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/anova.RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/anova.RidgeBinaryLogistic.R')
anova(pepe2,pepe)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/anova.RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/anova.RidgeBinaryLogistic.R')
anova(pepe2,pepe)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
help("seq")
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, echo=FALSE, message=FALSE, tidy=FALSE)
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, echo=FALSE, message=FALSE, tidy=FALSE)
library(foreign)
library(knitr)
library(table1)
library(boot)
library(ggplot2)
library(ggmosaic)
library(vcd)
library(DescTools)
library(car)
library(kableExtra)
library(gtsummary)
library(tableone)
# library("xlsx")
library(haven)
library(tab)
library("printr")
library(gt)
library(caret)
library(MultBiplotR)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/# 0 Test del Reloj/Nuevo test")
newtest=read.spss("Nuevo test.sav", to.data.frame = TRUE)
# Renombramos las variables en inglés (para el artículo) y también las categorías cuando sea necesario.
# Renombramos las variables en inglés (para el artículo) y también las categorías cuando sea necesario.
names(newtest)=c("Diagnostic", "EducationLevel", "Improvement", "Age", "Sex", "CDT_O_Contour",
"CDT_O_Numbers", "CDT_O_Time", "CDT_O_Total", "CDT_C_Contour", "CDT_C_Numbers",
"CDT_C_Time", "CDT_C_Total", "MMSE", "Year", "Season", "Day_Month",
"Day_Week", "Month", "Region", "Province", "City", "Hospital",
"Floor", "FirstWord", "SecondWord", "ThirdWord", "N93_O", "N86_D", "N79_N",
"N72_U", "N65_M", "FirstWord_R", "SecondWord_R", "ThirdWord_R", "Pencil",
"Clock", "NadaDeSies", "Take", "Fold", "Floor", "CloseEyes",
"Sentence", "Penthagons", "Age_groups", "Words_R", "Improvement_Pattern", "New_test",
"Diag_Bin", "New_test_2", "Wrong_Words")
newtest$Diagnostic=droplevels(newtest$Diagnostic)
levels(newtest$Diagnostic)=c("Normal", "MCI", "AD")
levels(newtest$Sex)=c("Male", "Female")
newtest$Improvement_Pattern=factor(newtest$Improvement_Pattern, labels = c("No", "Yes"))
levels(newtest$Diag_Bin)=c("Normal", "CI")
newtest$Wrong_Words=factor(newtest$Wrong_Words)
write_sav(newtest, "newtest.sav")
Tablaselecc <- newtest  %>% select(Diag_Bin, Age, Sex , Age_groups)
table2 <-
tbl_summary(
Tablaselecc,
by = Diag_Bin, # split table by group
missing = "no", # don't list missing data separately
percent="row",
statistic=list(all_continuous() ~ "{mean} ({sd})", all_categorical() ~ "{n} ({p}%)"),
label = list(Diag_Bin ~ "Diagnostic group"),
digits = list(Diag_Bin ~ 2)
) %>%
modify_header(label = "**Variable**") %>% # update the column header
bold_labels()%>% add_p()
table2
Tablaselecc2 <- newtest  %>% select(Wrong_Words, Improvement_Pattern, Diag_Bin)
table3 <-
tbl_summary(
Tablaselecc2,
by = Diag_Bin, # split table by group
missing = "no", # don't list missing data separately
percent="col",
statistic=list(all_continuous() ~ "{mean} ({sd})", all_categorical() ~ "{n} ({p}%)"),
label = list(Diag_Bin ~ "Diagnostic group"),
digits = list(Diag_Bin ~ 2, Wrong_Words~2, Improvement_Pattern~2),
type=list(c(Improvement_Pattern) ~ "categorical")
) %>%
modify_header(label = "**Variable**") %>% # update the column header
bold_labels()%>% add_p()
table3
mod0=glm(Diag_Bin ~ 1, data=Tablaselecc2, family = binomial)
mod1=glm(Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, family = binomial)
mod2=glm(Diag_Bin ~ Improvement_Pattern*Wrong_Words-Improvement_Pattern:Wrong_Words, data=Tablaselecc2, family = binomial)
options(knitr.kable.NA = '')
anova(mod2, test="Chisq")  %>% kable(caption = "Effects in the logistic regression model without interaction terms")
# mod2 %>% tbl_regression(exponentiate = FALSE) %>% bold_labels() %>% as_gt() %>%
#  gt::tab_source_note(gt::md("*Logistic regression without interaction terms*"))
mod2 %>% tabglm(decimals = 3, factor.compression = 4, print.html = TRUE) %>% kable(caption = "Logistic regression without interaction")
# mod2 %>% tbl_regression(exponentiate = FALSE) %>% bold_labels() %>% as_gt() %>%
#  gt::tab_source_note(gt::md("*Logistic regression without interaction terms*"))
prob=predict(mod2, newdata = Tablaselecc2, type = "response")
predictions=factor(prob>0.5, labels = c("Normal","CI"))
tablapred=table(Tablaselecc2$Diag_Bin, predictions)
kable(prop.table(tablapred, margin = 1)*100, digits = 2, caption = "Accuracy of the prediction") %>%
kable_classic() %>%
add_header_above(c("True value" = 1, "Prediction" = 2))
Tablaselecc <- newtest  %>% select(Diag_Bin, Age, Sex , Age_groups, Wrong_Words, Improvement_Pattern)
mod3=glm(Diag_Bin ~ Sex+Age+Improvement_Pattern+Wrong_Words, data=Tablaselecc, family = binomial)
mod3 %>% tabglm(decimals = 3, factor.compression = 4, print.html = TRUE) %>% kable(caption = "Logistic regression")
prob=predict(mod3, newdata = Tablaselecc, type = "response")
predictions=factor(prob>0.3, labels = c("Normal","CI"))
tablapred=table(Tablaselecc2$Diag_Bin, predictions)
kable(prop.table(tablapred, margin = 1)*100, digits = 2, caption = "Accuracy of the prediction") %>%
kable_classic() %>%
add_header_above(c("True value" = 1, "Prediction" = 2))
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2)
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE)
help("plot")
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE)
RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE, penalization=0.5)
pepe=RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE, penalization=0.5)
summary(pepe)
pepe=RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE, penalization=0.5, MinLambda = 0.1)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
pepe=RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE, penalization=0.5, MinLambda = 0.1)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
pepe=RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE, penalization=0.5, MinLambda = 0.1)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
pepe=RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE, penalization=0.5, MinLambda = 0.1)
pepe=RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE, penalization=0.5, MinLambda = 0.05)
pepe=RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE, penalization=0.3, MinLambda = 0.05)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogistic.R')
pepe=RidgeBinaryLogistic(y=Diag_Bin ~ Improvement_Pattern*Wrong_Words, data=Tablaselecc2, RidgePlot=TRUE, penalization=0.3, MinLambda = 0.05)
library(MultBiplotR)
library(MultBiplotR)
library(MultBiplotR)
library(MultBiplotR)
library(MultBiplotR)
