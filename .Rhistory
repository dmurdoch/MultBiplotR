return(nombres)
}
packs=Save.Installed.Packages()
packs
install.packages(packs)
install.packages(packs)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
load("~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/InstalledPacks_3 4.4.rda")
packs
install.packages(packs)
install.packages('BH', 'Deriv', 'FactoMineR', 'LSAfun', 'MANOVA', 'MultBiplotR', 'MultBiplotRGUI', 'NLP', 'R6', 'RCurl', 'Rcpp', 'RcppArmadillo', 'SnowballC', 'XML', 'ade4', 'adegraphics', 'amap', 'bindrcpp', 'callr', 'cellranger', 'clValid', 'cli', 'clipr', 'clisymbols', 'corrplot', 'cowplot', 'dcurver', 'deldir', 'dendextend', 'desc', 'devtools', 'digest', 'diptest', 'doBy', 'dplyr', 'factoextra', 'fansi', 'flashClust', 'flexmix', 'fpc', 'fs', 'gdata', 'ggplot2', 'ggpubr', 'ggrepel', 'ggsci', 'ggsignif', 'gh', 'git2r', 'glmnet', 'glue', 'gplots', 'haven', 'homals', 'ini', 'kernlab', 'labeling', 'lars', 'later', 'leaps', 'lmtest', 'lsa', 'manipulateWidget', 'mclust', 'mirt', 'modeltools', 'munsell', 'mvtnorm', 'openssl', 'pillar', 'pkgbuild', 'pkgconfig', 'pkgload', 'plogr', 'prabclus', 'processx', 'promises', 'ps', 'psych', 'purrr', 'pvclust', 'rcmdcheck', 'readxl', 'rematch', 'remotes', 'reshape2', 'rgl', 'rlang', 'robustbase', 'scales', 'sessioninfo', 'smacof', 'stringi', 'stringr', 'tibble', 'tidyr', 'tidyselect', 'tm', 'trimcluster', 'usethis', 'utf8', 'vcd', 'vegan', 'viridis', 'viridisLite', 'webshot', 'withr', 'wordcloud', 'xopen', 'BradleyTerry2', 'CVST', 'CircStats', 'Cubist', 'DEoptimR', 'DRR', 'Deriv', 'FGN', 'Formula', 'GPArotation', 'HKprocess', 'Hmisc', 'INLA', 'ISwR', 'KernSmooth', 'LearnBayes', 'MASS', 'MCMCpack', 'MLmetrics', 'Matrix', 'MatrixModels', 'ModelMetrics', 'MultBiplotR', 'MultBiplotRGUI', 'NominalLogisticBiplot', 'R6', 'RANN', 'RColorBrewer', 'RNeXML', 'ROCR', 'Rcgmin', 'Rcpp', 'RcppArmadillo', 'RcppEigen', 'RcppRoll', 'Rvmmin', 'SQUAREM', 'SparseM', 'TH.data', 'TeachingDemos', 'WikidataR', 'WikipediR', 'XML', 'abind', 'acepack', 'ade4', 'ade4TkGUI', 'adegenet', 'adegraphics', 'adephylo', 'akima', 'ape', 'assertthat', 'backports', 'base', 'base64enc', 'bindr', 'bindrcpp', 'bitops', 'bold', 'boot', 'brglm', 'broom', 'caTools', 'candisc', 'car', 'carData', 'caret', 'checkmate', 'class', 'classInt', 'cli', 'cluster', 'coda', 'codetools', 'coin', 'colorspace', 'combinat', 'compiler', 'corpcor', 'crayon', 'crosstalk', 'crul', 'curl', 'data.table', 'datasets', 'ddalpha', 'deldir', 'devtools', 'dichromat', 'digest', 'dimRed', 'dotCall64', 'dplyr', 'dunn.test', 'e1071', 'earth', 'ellipse', 'evaluate', 'expm', 'fastICA', 'fields', 'forcats', 'foreach', 'foreign', 'gWidgets', 'gWidgets2', 'gWidgets2tcltk', 'gWidgetstcltk', 'gam', 'gdata', 'geometry', 'ggplot2', 'git2r', 'glue', 'gmodels', 'gower', 'gplots', 'grDevices', 'graphics', 'grid', 'gridExtra', 'gtable', 'gtools', 'haven', 'heplots', 'highr', 'hms', 'htmlTable', 'htmltools', 'htmlwidgets', 'httpcode', 'httpuv', 'httr', 'igraph', 'ipred', 'iterators', 'jsonlite', 'kernlab', 'klaR', 'knitr', 'labeling', 'labelled', 'lattice', 'latticeExtra', 'lava', 'lazyeval', 'lme4', 'ltsa', 'lubridate', 'magic', 'magrittr', 'maps', 'maptools', 'markdown', 'mcmc', 'mda', 'memoise', 'methods', 'mgcv', 'mice', 'mime', 'miniUI', 'minqa', 'mirt', 'mlbench', 'mnormt', 'modeltools', 'multcomp', 'munsell', 'mvtnorm', 'natserv', 'nlme', 'nloptr', 'nnet', 'nnls', 'numDeriv', 'openssl', 'openxlsx', 'optextras', 'optimr', 'orthopolynom', 'pROC', 'pamr', 'parallel', 'party', 'pbkrtest', 'permute', 'phylobase', 'pixmap', 'pkgconfig', 'plotmo', 'plotrix', 'pls', 'plyr', 'polynom', 'praise', 'prettyunits', 'prodlim', 'profileModel', 'progress', 'proxy', 'psych', 'purrr', 'quantreg', 'questionr', 'qvcalc', 'randomForest', 'readr', 'recipes', 'rentrez', 'reshape', 'reshape2', 'rgdal', 'rgl', 'rio', 'ritis', 'rlang', 'rmarkdown', 'rncl', 'robustbase', 'rotl', 'rpart', 'rprojroot', 'rredlist', 'rstudioapi', 'sandwich', 'scales', 'scatterplot3d', 'segmented', 'seqinr', 'setRNG', 'sfsmisc', 'shiny', 'slam', 'smacof', 'solrium', 'sourcetools', 'sp', 'spData', 'spam', 'spatial', 'spdep', 'splancs', 'splines', 'spls', 'stats', 'stats4', 'stringi', 'stringr', 'strucchange', 'subselect', 'superpc', 'survival', 'taxize', 'tcltk', 'testthat', 'tibble', 'tidyr', 'tidyselect', 'timeDate', 'tkrplot', 'tools', 'triebeard', 'urltools', 'utils', 'uuid', 'vegan', 'vegan3d', 'viridis', 'viridisLite', 'waveslim', 'weights', 'whisker', 'wikitaxa', 'withr', 'wordcloud', 'worrms', 'xml2', 'xtable', 'yaml', 'zip', 'zoo')
)
)
install.packages('BH', 'Deriv', 'FactoMineR', 'LSAfun', 'MANOVA', 'MultBiplotR')
if (!require(devtools))
install.packages("devtools")
library(devtools)
install_github("villardon/MultBiplotR", dependencies = TRUE)
library(MultBiplotR)
Origin=as.numeric(wine$Origin)-1
X2=as.matrix(wine[,4:21])
WineM=PLSR1Bin(Origin, X2, S=2, penalization = 0.01, Algorithm=2, show=TRUE)
summary(WineM)
WineMbip=Biplot.PLSR1BIN(WineM)
plot(WineMbip,  ColorInd=Origin+2, mode="a", MinQualityVar=0.2, PlotSupVars=T,
SupMode="s", ShowBox=T, CexVar=0.6)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogisticFit.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogisticFit.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogisticFit.R')
WineM=PLSR1Bin(Origin, X2, S=2, penalization = 0.01, Algorithm=2, show=TRUE)
WineM=PLSR1Bin(Origin, X2, S=2, penalization = 0.01, Algorithm=2, show=FALSE)
library(MultBiplotR)
WineM=PLSR1Bin(Origin, X2, S=2, penalization = 0.01, Algorithm=2, show=FALSE)
WineM$BinaryFit
attributes(WineM$BinaryFit)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/RidgeBinaryLogisticFit.R')
library(MultBiplotR)
WineM=PLSR1Bin(Origin, X2, S=2, penalization = 0.01, Algorithm=2, show=FALSE)
summary(WineM)
WineMbip=Biplot.PLSR1BIN(WineM)
plot(WineMbip,  ColorInd=Origin+2, mode="a", MinQualityVar=0.2, PlotSupVars=T,
SupMode="s", ShowBox=T, CexVar=0.6)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
library(MultBiplotR)
WineM=PLSR1Bin(Origin, X2, S=2, penalization = 0.01, Algorithm=2, show=FALSE)
summary(WineM)
WineMbip=Biplot.PLSR1BIN(WineM)
plot(WineMbip,  ColorInd=Origin+2, mode="a", MinQualityVar=0.2, PlotSupVars=T,
SupMode="s", ShowBox=T, CexVar=0.6)
WineM=PLSR1Bin(Origin, X2, S=2, penalization = 0.01, Algorithm=1, show=FALSE)
summary(WineM)
WineMbip=Biplot.PLSR1BIN(WineM)
plot(WineMbip,  ColorInd=Origin+2, mode="a", MinQualityVar=0.2, PlotSupVars=T,
SupMode="s", ShowBox=T, CexVar=0.6)
WineM=PLSR1Bin(Origin, X2, S=2, penalization = 0.01, Algorithm=1, show=TRUE)
WineM=PLSR1Bin(Origin, X2, S=2, penalization = 0.01, Algorithm=1, show=TRUE)
summary(WineM)
WineMbip=Biplot.PLSR1BIN(WineM)
plot(WineMbip,  ColorInd=Origin+2, mode="a", MinQualityVar=0.2, PlotSupVars=T,
SupMode="s", ShowBox=T, CexVar=0.6)
WineM=PLSR1Bin(Origin, X2, S=2, penalization = 0.01, Algorithm=2, show=TRUE)
summary(WineM)
WineMbip=Biplot.PLSR1BIN(WineM)
plot(WineMbip,  ColorInd=Origin+2, mode="a", MinQualityVar=0.2, PlotSupVars=T,
SupMode="s", ShowBox=T, CexVar=0.6)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
is.vector(a)
is.vector(WineM)
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Library/Mobile Documents/com~apple~CloudDocs/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
library(MultBiplotR)
library(readxl)
Eco <- read_excel("/Volumes/KINGSTON/CB VJ15_Biplot.xlsx")
View(Eco)
Eco$MA
Eco$MA=as. actor(Eco$MA)
Eco$MA=as.factor(Eco$MA)
Eco$MA
Eco <- read_excel("/Volumes/KINGSTON/CB VJ15_Biplot.xlsx")
View(Eco)
Eco$MA
Eco$MA=as.factor(Eco$MA)
Eco$MA
dim(Eco)
X=as.matrix(Eco[,2:97])
X
view(X)
View(X)
if (!require(devtools))
install.packages("devtools")
library(devtools)
install_github("villardon/MultBiplotR", dependencies = TRUE)
library(MultBiplotR)
help("CanonicalBiplot, Canonical.Variate.Analysis")
canbip=CanonicalBiplot(X, group=Eco$MA)
X
X=as.matrix(Eco[,3:97])
X
canbip=CanonicalBiplot(X, group=Eco$MA)
plot(canbip, mode="s")
dim(Eco)
plot(canbip, mode="h")
plot(canbip, mode="a")
help("plot.Canonical.Biplot")
plot(canbip, mode="a", MinQualityVars=0.5)
Eco <- read_excel("/Volumes/KINGSTON/CB VJ15_Biplot.xlsx")
View(Eco)
Eco$MA
Eco$MA=as.factor(Eco$MA)
Eco$MA
dim(Eco)
X=as.matrix(Eco[,3:40])
X
canbip=CanonicalBiplot(X, group=Eco$MA)
X=as.matrix(Eco[,3:40])
X
Eco$MA
length(Eco$MA)
canbip=CanonicalBiplot(X, group=Eco$MA)
X=as.matrix(Eco[,3:40])
dim(X)
Eco$MA
canbip=CanonicalBiplot(X, group=Eco$MA)
CanonicalBiplot
library(MultBiplotR)
canbip=CanonicalBiplot(X, group=Eco$MA)
CanonicalBiplot <- function(X, group, SUP = NULL, InitialTransform = 5, LDA=FALSE, MANOVA = FALSE) {
cl <- match.call()
ContinuousDataTransform = c("Raw Data", "Substract the global mean", "Double centering",
"Column centering", "Standardize columns", "Row centering",
"Standardize rows", "Divide by the column means and center",
"Normalized residuals from independence", "Divide by the range",
"Within groups standardization", "Ranks")
if (is.numeric(InitialTransform))
InitialTransform = ContinuousDataTransform[InitialTransform]
Bip = list() #Container for the solution
Bip$call=cl
# Setting the properties of data
if (is.null(rownames(X)))
rownames(X) <- rownames(X, do.NULL = FALSE, prefix = "I")
RowNames = rownames(X)
if (is.null(colnames(X)))
colnames(X) <- colnames(X, do.NULL = FALSE, prefix = "V")
VarNames = colnames(X)
Bip$Title = "Canonical/MANOVA Biplot"
Bip$Type = "Canonical"
Bip$Non_Scaled_Data = X
Bip$Means = apply(X, 2, mean)
Bip$Medians = apply(X, 2, median)
Bip$Deviations = apply(X, 2, sd)
Bip$Minima = apply(X, 2, min)
Bip$Maxima = apply(X, 2, max)
Bip$P25 = apply(X, 2, quantile)[2, ]
Bip$P75 = apply(X, 2, quantile)[4, ]
Bip$GMean = mean(as.matrix(X))
Bip$Initial_Transformation=InitialTransform
X = TransformIni(as.matrix(X), transform = InitialTransform) # Initial transformation
rownames(X) <- RowNames
if (is.factor(group)) {
GroupNames = levels(group)
}
g = length(levels(group))
n = dim(X)[1]
m = dim(X)[2]
r = min(c(g - 1, m))
Bip$ncols=m
Bip$nrows=n
Bip$dim=r
if (LDA) {Bip$LDA=lda(X,group)
Bip$Predict=predict(Bip$LDA,X)$class
Bip$ClassificationTable = table(group, Bip$Predict)
Bip$PercentCorrect=diag(prop.table(Bip$ClassificationTable, 1))
names(Bip$PercentCorrect)=GroupNames
Bip$TotalPercentCorrect=sum(diag(prop.table(Bip$ClassificationTable)))
names(Bip$TotalPercentCorrect)= "Total"}
if (MANOVA) Bip$MANOVA = manova(X ~ group)
DimNames = "Dim 1"
for (i in 2:r) DimNames = c(DimNames, paste("Dim", i))
Z = Factor2Binary(group) # Matrix of indicators
ng = colSums(Z)
S11 = t(Z) %*% Z
Xb = solve(S11) %*% t(Z) %*% X
B = t(Xb) %*% S11 %*% Xb
S = t(X) %*% X - B
Y = (S11^0.5) %*% Xb %*% matrixsqrtinv(S)
SV = svd(Y)
H = matrixsqrt(S) %*% SV$v[, 1:r] # Variable coordinates
B = matrixsqrtinv(S) %*% SV$v[, 1:r] # Canonical Weigths
J = Xb %*% B # Center Coordinates
V = X %*% B # Individual Coordinates
if (!is.null(SUP)) {
VS = SUP %*% B
rownames(VS)=rownames(SUP)
colnames(VS)=DimNames
# Bip$SupPredict=predict(Bip$LDA,SUP)$class
}
else {
VS=NULL
Bip$SupPredict=NULL}
# Inertia, ANOVAs for each Canonical Variate and MANOVA
sct = diag(t(V) %*% V)
sce = diag(t(J) %*% S11 %*% J)
scr = sct - sce
fs = (sce/(g - 1))/(scr/(n - g))
signif2 = df(fs, (g - 1), (n - g))
vprop = SV$d[1:r]
iner = (vprop^2/sum(vprop^2)) * 100
acum = cumsum(iner)
Bip$EigenValues = vprop
Bip$Inertia = iner
Bip$CumInertia = acum
# colnames(Bip$EigenValues) <- c("Eigenvalue", "Explained Variance", "Cummulative")
# rownames(Bip$EigenValues) <- DimNames
lambda = vprop^2
pill = 1/(1 + lambda)
pillai = det(diag(pill))
glh = g - 1
gle = n - g
t = ((glh^2 * m^2 - 4)/(m^2 + glh^2 - 5))^0.5
w = gle + glh - 0.5 * (m + glh + 1)
df1 = m * glh
df2 = w * t - 0.5 * (m * glh - 2)
Bip$Wilksf = ((1 - pillai^(1/t))/(pillai^(1/t))) * (df2/df1)
Bip$Wilksp = 1 - pf(Bip$Wilksf, df1, df2)
Bip$GroupContributions = diag(1/rowSums(J^2)) %*% J^2
Bip$ColContributions = diag(1/rowSums(H^2)) %*% H^2
Bip$ExplTotal = matrix(0, r, 1)
Bip$RowContributions = matrix(0, n, r)
Bip$QLRVars = matrix(0, m, r)
SCT = sum(X^2)
SCRows = rowSums(X^2)
SCCols = colSums(X^2)
for (j in 1:r) {
Fitted = V[, 1:j] %*% t(H[, 1:j])
residuals = X - Fitted
Bip$ExplTotal[j] = 1 - sum(residuals^2)/SCT
Bip$RowContributions[, j] = 1 - rowSums(residuals^2)/SCRows
Bip$QLRVars[, j] = 1 - colSums(residuals^2)/SCCols
}
FitX = V %*% t(H)
Resid = X - FitX
SCR = sum(Resid^2)
FIT = 1 - (SCR/SCT)
sctotal = diag(t(X) %*% X)
scdentro = diag(S)
scentre = sctotal - scdentro
fs = (scentre/glh)/(scdentro/gle)
pval = 1 - pf(fs, glh, gle)
Bip$ANOVAS = cbind(sctotal, scentre, scdentro, fs, pval)
colnames(Bip$ANOVAS) <- c("Total", "Groups", "Error", "F", "p-val")
falfau = qt(1 - (0.025), (n - g))
falfab = qt(1 - (0.025/(g * m)), (n - g))
falfam = sqrt(qf(1 - 0.05, m, (n - g - m + 1)) * (((n - g) * m)/(n - g - m + 1)))
falfac = sqrt(qchisq(0.95, 2))
Bip$UnivRad = falfau * diag(solve(sqrt(S11)))/sqrt(n - g)
Bip$BonfRad = falfab * diag(solve(sqrt(S11)))/sqrt(n - g)
Bip$MultRad = falfam * diag(solve(sqrt(S11)))/sqrt(n - g)
Bip$ChisRad = falfac * diag(solve(sqrt(S11)))/sqrt(n - g)
Bip$n = n
Bip$p = m
Bip$g = g
Bip$X = X
Bip$groups = group
Bip$RowCoordinates = V
rownames(Bip$RowCoordinates) = RowNames
colnames(Bip$RowCoordinates) = DimNames
Bip$Sup_Individual_Coord = VS
Bip$ColCoordinates = H
rownames(Bip$ColCoordinates) = VarNames
colnames(Bip$ColCoordinates) = DimNames
Bip$GroupCoordinates = J
rownames(Bip$GroupCoordinates) = GroupNames
colnames(Bip$GroupCoordinates) = DimNames
Bip$Canonical_Weights = B
rownames(Bip$Canonical_Weights) = VarNames
colnames(Bip$Canonical_Weights) = DimNames
Bip$Structure_Correlations = cor(X, V)
rownames(Bip$Structure_Correlations) = VarNames
colnames(Bip$Structure_Correlations) = DimNames
rownames(Bip$GroupContributions) = GroupNames
colnames(Bip$GroupContributions) = DimNames
rownames(Bip$ColContributions) = VarNames
colnames(Bip$ColContributions) = DimNames
rownames(Bip$QLRVars) = VarNames
colnames(Bip$QLRVars) = DimNames
NGroups=length(levels(group))
Bip$Clusters = group
Bip$ClusterNames = levels(group)
palette(rainbow(NGroups))
ClusterColors = palette()
Bip$ClusterType="us"
Bip$ClusterColors=ClusterColors
class(Bip) <- "Canonical.Biplot"
return(Bip)
}
View(X)
canbip=CanonicalBiplot(X, group=Eco$MA)
Eco$MA
Eco <- read_excel("/Volumes/KINGSTON/CB VJ15_Biplot.xlsx")
View(Eco)
Eco$MA
Eco$MA=as.factor(Eco$MA)
Eco$MA
dim(Eco)
X=as.matrix(Eco[,3:40])
View(X)
canbip=CanonicalBiplot(X, group=Eco$MA)
plot(canbip, mode="a", MinQualityVars=0.5)
plot(canbip, mode="a", MinQualityVars=0.5, TypeCircle="U")
plot(canbip, mode="a", MinQualityVars=0.5, TypeCircle="C")
plot(canbip, mode="a", MinQualityVars=0.5, TypeCircle="B")
plot(canbip, mode="a", MinQualityVars=0.5, PlotVars = FALSE,  TypeCircle="B")
plot(canbip, mode="a", MinQualityVars=0.5, TypeCircle="B")
plot(canbip, mode="h", MinQualityVars=0.5, TypeCircle="B")
plot(canbip, mode="h", MinQualityVars=0, TypeCircle="B")
summary(canbip)
bip=PCA.Biplot(X)
plot(bip)
bip=AddCluster2Biplot(bip, ClusterType = "us", Groups = Eco$MA)
plot(bip)
plot(bip, PlotClus=TRUE)
help("plot.ContinuousBiplot")
plot(bip, PlotClus=TRUE, ClustCenters = TRUE)
plot(canbip, mode="a", MinQualityVars=0.8, TypeCircle="B")
library(MultBiplotR)
help(CanonicalBiplot)
help("CanonicalBiplot")
??CanonicalBiplot
pcabip=Canonical.Biplot(X, group=wine[,3])
pcabip=CanonicalBiplot(X, group=wine[,3])
X=as.matrix(wine[,4:21])
pcabip=CanonicalBiplot(X, group=wine[,3])
canbip=CanonicalBiplot(X, group=wine[,3])
plot(canbip)
class(canbip)
help("plot.Canonical.Biplot")
plot(canbip, TypeCircle = "U")
plot(canbip, TypeCircle = "B")
plot(canbip, TypeCircle = "C")
if (!require(devtools))
install.packages("devtools")
library(devtools)
install_github("villardon/MultBiplotR", dependencies = TRUE)
View(canbip)
library(MultBiplotR)
install.packages("~/Downloads/MultBiplotR_18.2.09.tar.gz", repos = NULL, type = "source")
install.packages("scales", "geometry", "deldir", "mirt", "GPArotation", "optimr")
install.packages("scales", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("scales", "geometry", "deldir", "mirt", "GPArotation", "optimr")
install.packages("scales", "geometry", "deldir", "mirt", "GPArotation", "optimr")
help(install.packages)
install_github("villardon/MultBiplotR", dependencies = TRUE)
library(devtools)
install_github("villardon/MultBiplotR", dependencies = TRUE)
install.packages("scales", "geometry", "deldir", "mirt", "GPArotation", "optimr")
install.packages("geometry", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("geometry","scales", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("geometry","scales",  "deldir", "mirt", "GPArotation", "optimr", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("geometry","scales",  "deldir", "mirt", "GPArotation", "optimr"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("geometry","scales",  "deldir", "mirt", "GPArotation", "optimr"))
install.packages("gWidgetsRGtk2", dep = TRUE,type = "source" )
install.packages("cairoDevice", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("gWidgetsRGtk2", dep = TRUE,type = "source" )
install.packages(c("geometry","scales",  "deldir", "mirt", "GPArotation", "optimr"))
install.packages("gWidgetsRGtk2", dep = TRUE,type = "source" )
install.packages("gWidgetsRGtk2", dep = TRUE,type = "source" )
install.packages("RGtk2", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("geometry","scales",  "deldir", "mirt", "GPArotation", "optimr"))
help(ColContributionPlot)
library(MultBiplotR)
help(ColContributionPlot)
library(MultBiplotR)
X=as.matrix(wine[,4:21])
pcabip=PCA.Biplot(X)
plot(pcabip,  ColorInd=as.numeric(wine[,3]), IndLabels= wine[,3], mode="a", MinQualityVar=0, SupMode="s", ShowBox=TRUE)
help(AddCluster2Biplot)
pcabip=AddCluster2Biplot(pcabip,  ClusterType = "us", Groups = wine[,3])
help("plot.ContinuousBiplot") #Esta es la función que dibuja un biplot para datos continuos
plot(pcabip,  IndLabels= wine[,3], mode="a",  ShowBox=TRUE, PlotClus=TRUE, ClustCenters=TRUE)
help(ColContributionPlot)
ColContributionPlot(pcabip, cex=1 , AddSigns2Labs = FALSE)
CorrelationCircle(pcabip)
help(manova)
manvin=manova(X ~ wine[,3])
summary(manvin)
summary(manvin, test = "Wilks")
summary(manvin, test = "Hotelling")
summary(manvin, test = "Roy")
summary.aov(manvin)
help("CanonicalBiplot")
canbip=CanonicalBiplot(X, group=wine[,3])
plot(canbip)
class(canbip)
help("plot.Canonical.Biplot")
plot(canbip, TypeCircle = "U")
plot(canbip, TypeCircle = "B")
plot(canbip, TypeCircle = "C")
data(spiders)
x2=Dataframe2BinaryMatrix(spiders)
colnames(x2)=colnames(spiders)
dist=BinaryProximities(x2)
pco=PrincipalCoordinates(dist)
pcobip=ExternalBinaryLogisticBiplot(pco)
plot(pcobip)
class(pcobip)
help("plot.External.Binary.Logistic.Biplot")
plot(pcobip, Mode = "a")
plot(pcobip, Mode = "s")
logbip=BinaryLogBiplotGD(X,penalization=0.1)
plot(logbip, Mode="a")
summary(logbip)
logbip=BinaryLogBiplotGD(X, penalization=0.001)
plot(logbip, Mode="a")
summary(logbip)
logbip=BinaryLogBiplotGD(X, penalization=1)
plot(logbip, Mode="a")
summary(logbip)
data(spiders)
X=Dataframe2BinaryMatrix(spiders)
logbip=BinaryLogBiplotGD(X,penalization=0.1)
plot(logbip, Mode="a")
summary(logbip)
data(spiders)
X=Dataframe2BinaryMatrix(spiders)
logbip=BinaryLogBiplotGD(X,penalization=0.1)
plot(logbip, Mode="a")
summary(logbip)
logbip=BinaryLogBiplotGD(X,penalization=0.1)
plot(logbip, Mode="a")
logbip=BinaryLogBiplotGD(X,penalization=0.1, seed=0)
plot(logbip, Mode="a")
logbip=BinaryLogBiplotGD(X,penalization=0.1, seed=0)
plot(logbip, Mode="a")
summary(logbip)
RAPD
logbip=BinaryLogBiplotGD(RAPD,penalization=0.1, seed=0)
plot(logbip, Mode="a")
summary(logbip)
logbip2
logbip
plot(logbip2, Mode="s")
logbip2=BinaryLogBiplotGD(RAPD,penalization=0.1, seed=0)
plot(logbip2, Mode="s")
class(logbip2)
help("plot.Binary.Logistic.Biplot")
help("plot.Binary.Logistic.Biplot")
library(MultBiplotR)
Origin=c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 4, 5, 5, 5, 5, 6, 7, 8, 8, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11)
help("plot.Binary.Logistic.Biplot")
help("plot.External.Binary.Logistic.Biplot")
plot(logbip2, Mode="s", RowColors=Origin, PlotVars = FALSE)
library("MultBiplotR", lib.loc="~/Library/R/3.5/library")
install.packages('RCurl')
install.packages('XML')
install.packages('tm')
install.packages('XML')
install.packages('wordcloud')
library(RCurl)
library(XML)
library(tm)
library(wordcloud)
text <- readLines(file.choose())
text <- readLines(file.choose())
text <- readLines(file.choose())
text
docs <- VCorpus(VectorSource(text))
inspect(docs)
myCorpus = tm_map(docs, removePunctuation)
myCorpus = tm_map(myCorpus, removeNumbers)
myCorpus = tm_map(myCorpus, removeWords, stopwords("spanish"))
myCorpus = tm_map(myCorpus, removeWords, stopwords("english"))
myCorpus <- tm_map(myCorpus, PlainTextDocument)
inspect(myCorpus)
myDTM = TermDocumentMatrix(myCorpus)
m = as.matrix(myDTM)
m
v = sort(rowSums(m), decreasing = TRUE)
set.seed(4363)
wordcloud(names(v),v, min.freq = 3 ,max.words=400, colors=brewer.pal(6,"Dark2"),random.order=FALSE)
v
library(MultBiplotR)
help("PCA.Biplot, PCA.Analysis")
data(Protein)
bip=PCA.Biplot(Protein[,3:11])
plot(bip)
## Biplot with scales on the variables
plot(bip, mode="s", margin=0.2)
plot(bip, mode="s", margin=0.2, dp=1)
install.packages("eRm", lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("eRm", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("eRm")
res.rasch <- RM(raschdat1)
raschdat1
pres.rasch <- person.parameter(res.rasch)
res.rasch
lrres.rasch <- LRtest(res.rasch, splitcr = "mean")
lrres.rasch
pres.rasch
dim(raschdat1)
plot(lrres.rasch)
plot(pres.rasch)
class(res.rasch)
summary(res.rasch)
