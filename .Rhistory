start(AirPassengers)
end(AirPassengers)
frequency(AirPassengers)
summary(AirPassengers)
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
cycle(AirPassengers)
plot(aggregate(AirPassengers,FUN=mean))
boxplot(AirPassengers~cycle(AirPassengers))
help(aggregate)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
install.packages("urca")
library(urca)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
(urca)
diff(log(AirPassengers))
adf.test
install.packages("aTSA")
library(aTSA)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
adf.test(diff(log(AirPassengers)), alternative="stationary")
adf.test(diff(log(AirPassengers)))
install.packages("tseries")
library(tseries)
adf.test(diff(log(AirPassengers)))
acf(log(AirPassengers))
acf(diff(log(AirPassengers)))
pacf(diff(log(AirPassengers)))
(fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12)))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred$pred, log = "y", lty = c(1,3))
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("yeastExpData")
yeastExpData
library(yeastExpData)
yeastExpData
help(yeastExpData)
library(haven)
PaisesProteinas <- read_sav("C:/Users/Guillermo/Desktop/PaisesProteinas.sav")
setwd("~/Desktop")
PaisesProteinas <- read_sav("PaisesProteinas.sav")
View(PaisesProteinas)
summary(PaisesProteinas)
attach(PaisesProteinas)
X<-cbind(CarneRoja,CarneBlanca,Huevos,Leche,Pescado,Cereales,Féculas,Frutosyvegetales)
summary(X)
Cor(X)
cor(X)
X<-cbind(CarneRoja,CarneBlanca,Huevos,Leche,Pescado,Cereales,Féculas,Frutosyvegetales)
X<-cbind(CarneRoja,CarneBlanca,Huevsos,Leche,Pescado,Cereales,Féculas,Frutosyvegetales)
summary(X)
cor(X)
pcal<-princomp(X,scores=TRUE,cor=TRUE)
summary(pcal)
loadings(pcal)
plot(pcal)
screeplot(pcal,type = "line", main = "Scree Plot")
biplot(pcal)
pcal$scores[2:10,]
fal<-factanal(X,factor=3)
fal
fal2<-factanal(X,factors = 3,rotation = "varimax")
fal2
fal3<-factanal(X,factors = 3,rotation = "varimax", scores = "regression")
fal3
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("yeastExpData")
library(yeastExpData)
read.table("SensorEcology.txt", header = TRUE)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/0 Roberto")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/0 Roberto")
read.table("SensorEcology.txt", header = TRUE)
read.table("SensorEcology.txt", header = TRUE)
Eco=read.table("SensorEcology.txt", header = TRUE)
view(Eco)
View(Eco)
class(AirPassengers)
help(ts)
head(Eco)
Eco$Dia=factor(Eco$Dia)
Eco$Dia
Eco$Mes=factor(Eco$Mes)
Eco$Año=factor(Eco$Año)
Eco$Mes
Eco$Año
levels(Eco$Mes)=c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre")
Eco$Mes
ts(1:10, frequency = 4, start = c(1959, 2)) # 2nd Quarter of 1959
print( ts(1:10, frequency = 7, start = c(12, 2)), calendar = TRUE)
gnp <- ts(cumsum(1 + round(rnorm(100), 2)),
start = c(1954, 7), frequency = 12)
plot(gnp) # using 'plot.ts' for time-series plot
gnp
z <- ts(matrix(rnorm(300), 100, 3), start = c(1961, 1), frequency = 12)
class(z)
head(z) # as "matrix"
plot(z)
plot(z, plot.type = "single", lty = 1:3)
z
plot(nhtemp, lag(nhtemp, 1), cex = .8, col = "blue",
main = "Lag plot of New Haven temperatures")
aggregate(AirPassengers,FUN=mean)
boxplot(AirPassengers~cycle(AirPassengers))
dim(Eco)
head(Eco)
ts(matrix(Eco[6:17], start = c(2010, 1), frequency = 24)
)
ts(Eco[6:17], start = c(2010, 1), frequency = 24)
Eco[6:17]
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/0 Roberto")
# Elimine el primer y el ultimo dia ya que no tenían 24 horas
Eco=read.table("SensorEcology.txt", header = TRUE)
View(Eco)
head(Eco)
Eco$Dia=factor(Eco$Dia)
Eco$Mes=factor(Eco$Mes)
Eco$Año=factor(Eco$Año)
levels(Eco$Mes)=c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre")
Eco[6:17]
ts(Eco[6:17], start = c(2010, 1), frequency = 24)
install.packages("rnoaa")
require(lubridate)
require(dplyr)
## get data for multiple stations
# St. Petersburg, FL station
res1 <- isd(usaf="997353", wban="99999", year=2016)
# Columbia Metropolitan Airport
res2 <- isd(usaf="723100", wban="13883", year=2016)
## combine data from the two cities
res_all <- rbind(res1, res2)
require(rnoaa)
require(lubridate)
require(dplyr)
## get data for multiple stations
# St. Petersburg, FL station
res1 <- isd(usaf="997353", wban="99999", year=2016)
# Columbia Metropolitan Airport
res2 <- isd(usaf="723100", wban="13883", year=2016)
## combine data from the two cities
res_all <- rbind(res1, res2)
res1
attributes(res1)
res_all$date_time <- ymd_hm(
sprintf("%s %s", as.character(res_all$date), res_all$time)
)
res_all <- rbind(res1, res2)
res_all <- rbind(res1, res2)
res2
help(ymd_hm)
here = ftp://ftp.ncdc.noaa.gov/pub/data/noaa/isd-history.txt
res1 <- isd(usaf="997353", wban="99999", year=2016)
res2 <- isd(usaf="723100", wban="13883", year=2016)
res2 <- isd(usaf="723100", wban="13883", year=2016)
res2
res_all <- bind_rows(res1, res2)
res_all$date_time <- ymd_hm(
sprintf("%s %s", as.character(res_all$date), res_all$time)
)
res_all$date_time
res_all <- res_all %>% filter(temperature < 900)
date1 <- as.Date("2016-07-01")
date2 <- as.Date("2016-07-15")
res_all <- res_all[res_all$date >= date1 & res_all$date <= date2,]
res_all$date
require(ggplot2)
ggplot(res_all, aes(x=date_time, y=temperature, group=usaf_station, colour=usaf_station)) +
geom_line(size=1.0) + scale_color_manual(values=c("#FF6666", "#56B4E9"),
name="Weather\nStation", labels=c("Columbia,SC", "St. Pete.,FL")) + theme(legend.key.size=unit(1,"cm"))
date1
date2
res_all$date
date1 <- as.Date("20160701")
date2 <- as.Date("20160715")
date1 <- as.Date("2016-07-01")
date2 <- as.Date("2016-07-15")
res_all <- res_all[res_all$date >= date1 & res_all$date <= date2,]
dim(res_all)
res_all$temperature
help(strptime)
head(Eco)
Eco=read.table("SensorEcology.txt", header = TRUE)
head(Eco)
paste(Eco$Dia, Eco$Mes, Eco$Año)
seq(as.Date("1910/1/1"), as.Date("1999/1/1"), "years")
seq(as.Date("1910/1/1"), as.Date("1999/1/1"), "hour")
seq(as.Date("1910/1/1"), as.Date("1999/1/1"), "hours")
seq(ISOdate(1910,1,1), ISOdate(1999,1,1), "years")
seq(ISOdate(1998,1,1), ISOdate(1999,1,1), "years")
seq(ISOdate(1998,1,1), ISOdate(1999,1,1), "hour")
seq
seq(ISOdate(2010,1,1), ISOdate(2015,1,1), "hour")
seq(ISOdate(2000,1,31), by = "month", length.out = 4)
seq(ISOdate(2010,6,14), ISOdate(2015,2,25), "hour")
ISOdate
help(ISOdate)
seq(ISOdate(2010,6,14, 0), ISOdate(2015,2,25), "hour")
dates=seq(ISOdate(2010,6,14, 0), ISOdate(2015,2,25), "hour")
length(dates)
dim(Eco)
dates=seq(ISOdate(2010,6,14, 0), ISOdate(2015,2,25, 23), "hour")
dates
class(dates)
ISOdatetime(Eco$Año , Eco$Mes, Eco$Dia , Eco$Hora)
ISOdatetime(Eco$Año , Eco$Mes, Eco$Dia , Eco$Hora, min=0, sec=0, tz = "")
Eco$Año
ISOdatetime(Eco$Año[1] , Eco$Mes[1], Eco$Dia[1] , Eco$Hora[1], min=0, sec=0, tz = "")
head(Eco)
Eco$Año[1]
ISOdate(Eco$Año[1] , Eco$Mes[1], Eco$Dia[1] , Eco$Hora[1], min=0, sec=0, tz = "")
ISOdate(Eco$Año[1] , Eco$Mes[1], Eco$Dia[1] , Eco$Hora[1], min=0)
ISOdate(Eco$Año[1] , Eco$Mes[1], Eco$Dia[1] , Eco$Hora[1])
Eco$Año[1] , Eco$Mes[1], Eco$Dia[1] , Eco$Hora[1]
Eco$Año[1]
Eco$Mes[1]
Eco$Dia[1]
Eco$Hora[1]
ISOdate(Eco$Año[1] , Eco$Mes[1], Eco$Dia[1] )
ISOdate(Eco$Año[1] , Eco$Mes[1], Eco$Dia[1] , Eco$Hora[1, 1:2])
Eco$Hora[1, 1:2]
Eco$Hora[1]
Eco$Hora[1][1:2]
as.numeric(Eco$Hora[1][1:2])
Eco$Hora
as.numeric(Eco$Hora)
as.character(Eco$Hora)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/0 Roberto")
Eco=read.table("SensorEcology.txt", header = TRUE)
View(Eco)
head(Eco)
ISOdate(Eco$Año[1] , Eco$Mes[1], Eco$Dia[1] , Eco$Hora[1])
ISOdate(Eco$Año[1] , Eco$Mes[1], Eco$Dia[1] , Eco$Hora[1], tz="")
Eco$Hora
ISOdate(Eco$Año[1] , Eco$Mes[1], Eco$Dia[1] , Eco$Hora[1], tz="")
ISOdate(Eco$Año , Eco$Mes, Eco$Dia , Eco$Hora, tz="")
dates=seq(ISOdate(2010,6,14, 0), ISOdate(2015,2,25, 23), "hour")
length(dates)
dim(Eco)
Eco$Dates=Dates
dates=seq(ISOdate(2010,6,14, 0), ISOdate(2015,2,25, 23), "hour")
Eco$Dates=dates
Eco$Dates=dates
Eco$Dates
Eco
library(plyr)
detach("package:dplyr", unload=TRUE)
detach("package:plyr", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:rnoaa", unload=TRUE)
library(plyr)
require(dplyr)
require(xts)
d.mean <- apply.daily(Eco, mean)
Eco[,6:18]
as.xts(Eco[,6:18], order.by=dates)
dates=ISOdate(Eco$Año , Eco$Mes, Eco$Dia , Eco$Hora, tz="")
dates
dates
as.xts(Eco[,6:18], , order.by=dates)
Serie=as.xts(Eco[,6:18], , order.by=dates)
class(Serie)
Serie=as.xts(Eco[,6:18], order.by=dates)
class(Serie)
plot(Serie)
apply.daily(Serie, Mean)
apply.daily(Serie, mean)
Serie[1]
Serie[,1]
plot(Serie[,1])
diario=apply.daily(Serie, mean)
diario
plot(diario[,1])
mensual=apply.monthly(Serie, mean)
mensual
Eco
dim(Eco)
Eco[41232,]
Eco[41220:41232,]
which(is.na(Eco))
apply(Eco,1,sum)
apply(Eco[,6:18],1,sum)
which(is.na(apply(Eco[,6:18],1,sum)))
Eco[18570,]
Eco[18571,]
Eco[18570:18572,]
(362.70 +41.13)/2
Eco[18571,11]
Eco[18571,11]=201.915
Serie=as.xts(Eco[,6:18], order.by=dates)
diario=apply.daily(Serie, mean)
plot(diario[,1])
diario=apply.daily(Serie, mean, na.rm=T)
plot(diario[,1])
Eco=read.table("SensorEcology.txt", header = TRUE)
Eco[18571,11]=201.915
View(Eco)
which(is.na(Eco))
mensual=apply.monthly(Serie, mean)
mensual
plot(Serie[,1])
mensual
plot(mensual)
dim(mensual)
plot(mensual[1:57,1])
diario
dim(diario)
diario[1719,]
plot(diario[-1719,1])
plot(diario[-1719,1:2])
require(rnoaa)
require(lubridate)
require(plyr)
require(dplyr)
require(xts)
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/0 Roberto")
Eco=read.table("SensorEcology.txt", header = TRUE)
which(is.na(Eco))
Eco[18571,11]=201.915
View(Eco)
head(Eco)
Eco$Dia=factor(Eco$Dia)
Eco$Mes=factor(Eco$Mes)
Eco$Año=factor(Eco$Año)
levels(Eco$Mes)=c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre")
dates=ISOdate(Eco$Año , Eco$Mes, Eco$Dia , Eco$Hora, tz="")
dates
Eco$Año
ISOdate(Eco$Año , Eco$Mes, Eco$Dia , Eco$Hora, tz="")
Eco=read.table("SensorEcology.txt", header = TRUE)
which(is.na(Eco))
Eco[18571,11]=201.915
#View(Eco)
head(Eco)
dates=ISOdate(Eco$Año , Eco$Mes, Eco$Dia , Eco$Hora, tz="")
dates
Serie=as.xts(Eco[,6:18], order.by=dates)
diario=apply.daily(Serie, mean, na.rm=T)
plot(diario[-1719,1:2])
mensual=apply.monthly(Serie, mean)
plot(mensual[1:57,1])
plot.xts
help(plot.xts)
install.packages("quantmod")
class(Serie)
end(Serie)
dim(Serie)
Serie[41232,]
Serie[41231,]
Serie[41220: 41232,]
dates
head(Serie)
dim(Eco)
Eco[41220: 41232,]
Serie[41220: 41232,]
Serie[1000: 1010,]
Serie[2000: 2010,]
dim(Serie)
Serie=Serie[-(41228:41232),]
dim(Serie)
end(Serie)
Serie=as.xts(Eco[,6:18], order.by=dates)
Serie=Serie[-(41229:41232),]
diario=apply.daily(Serie, mean, na.rm=T)
plot(diario[,1])
mensual=apply.monthly(Serie, mean)
plot(mensual[,1])
end(Serie)
dim(Serie)
Eco[41220: 41232,]
Serie[41220: 41232,]
points(mensual[,2])
plot(mensual[,1])
points(mensual[,2])
plot(mensual[,2])
as.ts(Serie)
Serie.zoo=as.zoo(Serie)
tsRainbow <- rainbow(ncol(zoo.basket))
tsRainbow <- rainbow(ncol(Serie.zo))
tsRainbow <- rainbow(ncol(Serie.zoo))
plot(x = Serie.zoo, ylab = "Y", main = "YY",
col = tsRainbow, screens = 1)
head(Serie)
plot(x = Serie.zoo[c(1,3),], ylab = "Average temperature", main = "Average temperatures",
col = tsRainbow, screens = 1)
tsRainbow <- rainbow(ncol(Serie.zoo[c(1,3),]))
plot(x = Serie.zoo[c(1,3),], ylab = "Average temperature", main = "Average temperatures",
col = tsRainbow, screens = 1)
Serie.zoo[c(1,3),]
Serie.zooo[,c(1,3)]
Serie.zoo[,c(1,3)]
plot(x = Serie.zoo[,c(1,3)], ylab = "Average temperature", main = "Average temperatures",
col = tsRainbow, screens = 1)
legend(x = "topleft", legend = c("Sensor 1", "Sensor 2"),
lty = 1,col = tsRainbow)
tsRainbow
plot(x = Serie.zoo[,c(1,3)], ylab = "Average temperature", main = "Average temperatures",
col = c("blue", "red"), screens = 1)
diario.zoo=apply.daily(Serie.zoo, mean, na.rm=T)
plot(x = diario.zoo[,c(1,3)], ylab = "Average temperature", main = "Average temperatures",
col = c("blue", "red"), screens = 1)
legend(x = "topleft", legend = c("Sensor 1", "Sensor 2"),
lty = 1,col = c("blue", "red"))
plot(x = mensual.zoo[,c(1,3)], ylab = "Average temperature", main = "Average temperatures",
col = c("blue", "red"), screens = 1)
mensual.zoo=apply.monthly(Serie.zoo, mean)
plot(x = mensual.zoo[,c(1,3)], ylab = "Average temperature", main = "Average temperatures",
col = c("blue", "red"), screens = 1)
legend(x = "topleft", legend = c("Sensor 1", "Sensor 2"),
lty = 1,col = c("blue", "red"))
head(Serie)
plot(x = Serie.zoo[,c(2,4)], ylab = "Humedad", main = "Humedades relativas",
col = c("blue", "red"), screens = 1)
legend(x = "topleft", legend = c("Sensor 1", "Sensor 2"),
lty = 1,col = c("blue", "red"))
plot(x = diario.zoo[,c(2,4)], ylab = "Humedad", main = "Humedades relativas",
col = c("blue", "red"), screens = 1)
legend(x = "topleft", legend = c("Sensor 1", "Sensor 2"),
lty = 1,col = c("blue", "red"))
plot(x = mensual.zoo[,c(2,4)], ylab = "Humedad", main = "Humedades relativas",
col = c("blue", "red"), screens = 1)
legend(x = "topleft", legend = c("Sensor 1", "Sensor 2"),
lty = 1,col = c("blue", "red"))
plot(x = Serie.zoo[,c(5,6)], ylab = "Radiación", main = "Radiación solar",
col = c("blue", "red"), screens = 1)
legend(x = "topleft", legend = c("Sensor 1", "Sensor 2"),
lty = 1,col = c("blue", "red"))
plot(x = diario.zoo[,c(5,6)], ylab = "Radiación", main = "Radiación solar",
col = c("blue", "red"), screens = 1)
legend(x = "topleft", legend = c("Sensor 1", "Sensor 2"),
lty = 1,col = c("blue", "red"))
plot(x = mensual.zoo[,c(5,6)], ylab = "Radiación", main = "Radiación solar",
col = c("blue", "red"), screens = 1)
plot(mensual[,1], ylab = "Temperatura", main = "Temperaturas medias",)
plot(aggregate(Serie,FUN=mean))
plot(aggregate(Serie, by=month, FUN=mean))
colnames(Serrie)
colnames(Serie)
colnames(serie)<- c("Temperatura-Dentro",  "Humedad Relativa-Dentro",    "Temperatura-Fuera",  "Humedad Relativa-Fuera",
"Radiacion-Dentro" ,  "Radiacion-Fuera",   "Cont_agua_1", "Cont_Agua_2", "Cont_agua_3", "Cont_agua_4", "Cont_agua_5", "Cont_agua_6")
dates=ISOdate(Eco$Año , Eco$Mes, Eco$Dia , Eco$Hora, tz="")
Serie=as.xts(Eco[,6:17], order.by=dates)
Serie=Serie[-(41229:41232),]
colnames(serie)<- c("Temperatura-Dentro",  "Humedad Relativa-Dentro",    "Temperatura-Fuera",  "Humedad Relativa-Fuera",
"Radiacion-Dentro" ,  "Radiacion-Fuera",   "Cont_agua_1", "Cont_Agua_2", "Cont_agua_3", "Cont_agua_4", "Cont_agua_5", "Cont_agua_6")
colnames(Serie)<- c("Temperatura-Dentro",  "Humedad Relativa-Dentro",    "Temperatura-Fuera",  "Humedad Relativa-Fuera",
"Radiacion-Dentro" ,  "Radiacion-Fuera",   "Cont_agua_1", "Cont_Agua_2", "Cont_agua_3", "Cont_agua_4", "Cont_agua_5", "Cont_agua_6")
head(Serie)
plot(mensual[,1], ylab = "Temperatura", main = "Temperaturas medias mensuales",)
plot(aggregate(Serie, by=month, FUN=mean))
plot(aggregate(Serie[,c(1,3)], by=month, FUN=mean))
aggregate
help(aggregate)
aggregate(Serie[,c(1,3)], by=month, FUN=mean)
Mens=aggregate(Serie[,c(1,3)], by=month, FUN=mean)
Mens
class(Mens)
Mens=aggregate(Serie[,c(1,3)], by=week, FUN=mean)
plot(Mens)
Mens
Mens=aggregate(Serie[,c(1,3)], by=month, FUN=mean)
plot(Mens)
Mens=aggregate(Serie[,c(1,3)], by=c(month, year), FUN=mean)
Mens=aggregate(Serie[,c(1,3)], by=c(month, year), FUN=mean)
help("aggregate.ts")
Mens=aggregate(Serie[,c(1,3)], by=c(year, week), FUN=mean)
Mens=aggregate(Serie[,c(1,3)], by=c(week, year), FUN=mean)
Weekly=aggregate(Serie[,c(1,3)], by=week, FUN=mean)
plot(Weekly)
plot(Mens, ylab = "Temperatura", main = "Temperaturas medias para cada hora",col = c("blue", "red"), screens = 1)
plot(Weekly, ylab = "Temperatura", main = "Temperaturas medias para cada hora",col = c("blue", "red"), screens = 1))
plot(Weekly, ylab = "Temperatura", main = "Temperaturas medias para cada hora",col = c("blue", "red"), screens = 1)
Weekly=aggregate(Serie[,c(1,3)], by=day, FUN=mean)
plot(Weekly, ylab = "Temperatura", main = "Temperaturas medias para cada hora",col = c("blue", "red"), screens = 1)
Mens=aggregate(Serie[,c(1,3)], by=month, FUN=mean)
plot(Mens, ylab = "Temperatura", main = "Temperaturas medias para cada mes (promedio años)",col = c("blue", "red"), screens = 1)
Weekly=aggregate(Serie[,c(1,3)], by=week, FUN=mean)
plot(Weekly, ylab = "Temperatura", main = "Temperaturas medias para cada semana (promedio años)",col = c("blue", "red"), screens = 1)
plot(x = weekly.zoo[,c(1,3)], ylab = "Temperatura", main = "Temperaturas medias para cada mes",
col = c("blue", "red"), screens = 1)
weekly=apply.weekly(Serie.zoo, mean)
plot(x = weekly.zoo[,c(1,3)], ylab = "Temperatura", main = "Temperaturas medias para cada mes",
col = c("blue", "red"), screens = 1)
weekly=apply.weekly(Serie.zoo, mean)
weekly.zoo=apply.weekly(Serie.zoo, mean)
plot(x = weekly.zoo[,c(1,3)], ylab = "Temperatura", main = "Temperaturas medias para cada mes",
col = c("blue", "red"), screens = 1)
legend(x = "topleft", legend = c("Sensor 1", "Sensor 2"),
lty = 1,col = c("blue", "red"))
Mens=aggregate(Serie[,c(1,3)], by=month, FUN=mean)
plot(Mens, ylab = "Temperatura", main = "Temperaturas medias para cada mes (promedio años)",col = c("blue", "red"), screens = 1)
Weekly=aggregate(Serie[,c(1,3)], by=week, FUN=mean)
plot(Weekly, ylab = "Temperatura", main = "Temperaturas medias para cada semana (promedio años)",col = c("blue", "red"), screens = 1)
plot(x = weekly.zoo[,c(2,4)], ylab = "Humedad", main = "Humedades relativas para cada semana",
col = c("blue", "red"), screens = 1)
legend(x = "topleft", legend = c("Dentro", "Fuera"),
lty = 1,col = c("blue", "red"))
plot(x = mensual.zoo[,c(2,4)], ylab = "Humedad", main = "Humedades relativas",
col = c("blue", "red"), screens = 1)
legend(x = "topleft", legend = c("Dentro", "Fuera"),
lty = 1,col = c("blue", "red"))
plot(x = weekly.zoo[,c(5,6)], ylab = "Radiación", main = "Radiación solar para cada día",
col = c("blue", "red"), screens = 1)
legend(x = "topleft", legend = c("Dentro", "Fuera"),
lty = 1,col = c("blue", "red"))
help(stl)
install.packages("forecast")
require(forecast)
ggmonthplot(Serie)
help("as.ts")
library(MultBiplotR)
