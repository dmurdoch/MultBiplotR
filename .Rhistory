help("drop")
drop(X)
X
y
drop(y)
drop(y)
dim(x)
dim(X)
dim(Y)
dim(y)
dim(drop(y))
dimy = dim(y)
dimy
.Machine$integer.max
nlam
glmmod <- glmnet(X, y=wine[,2], alpha=0, family="binomial")
plot(glmmod, xvar="lambda")
coef(glmmod)[, 10]
cv.glmmod <- cv.glmnet(X, y=y, alpha=1)
plot(cv.glmmod)
coef(glmmod)[, 8]
cv.glmmod <- cv.glmnet(X, y=y, alpha=0)
plot(cv.glmmod)
coef(glmmod)[, 15]
(best.lambda <- cv.glmmod$lambda.min)
predict(glmmod, newx=X, type="class", s=best.lambda)
X=as.matrix(wine[,4:21])
y=as.numeric(wine[,2])-1
fit=RidgeBinaryLogistic(y,X, penalization=best.lambda)
summary(fit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
library(MultBiplotR)
X=as.matrix(wine[,4:21])
y=as.numeric(wine[,2])-1
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
mifit=PLSR(y,X, CrossValidation=TRUE, show=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE, show=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE, show=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE, show=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE, show=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE, show=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE, show=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
mifit
mifit$RegParameters
mibip=Biplot.PLSR(mifit)
summary(mibip)
plot(mibip,  ColorInd=y+2, IndLabels= wine[,2], mode="s", MinQualityVar=0, PlotSupVars=TRUE, SupMode="s")
plot(mibip, PlotVars=TRUE, IndLabels = y, ColorInd=y+1)
mifit$RegParameters
mifit$R2
plot(mifit)
mifit$Crossvalidation
plot(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
plot(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
plot(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
plot(mifit)
plot(mifit, ParameterBoxPlot=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
library(MultBiplotR)
if (!require(devtools))
install.packages("devtools")
library(devtools)
install_github("villardon/MultBiplotR", dependencies = TRUE)
if (!require(devtools))
install.packages("devtools")
library(devtools)
install_github("villardon/MultBiplotR", dependencies = TRUE)
library("MultBiplotR", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
if (!require(devtools))
install.packages("devtools")
library(devtools)
install_github("villardon/MultBiplotR", dependencies = TRUE, force=TRUE)
install_github("villardon/MultBiplotR", dependencies = TRUE, force=TRUE)
install_github("villardon/MultBiplotR", dependencies = TRUE, force=TRUE)
library(MultBiplotR)
library(MultBiplotR)
install_github("villardon/MultBiplotR", dependencies = TRUE, force=TRUE)
library(MultBiplotR)
install.packages(c("ade4", "adegraphics", "ape", "backports", "car", "covr", "curl", "dae", "DescTools", "devtools", "dotCall64", "ellipse", "foreach", "git2r", "glue", "Hmisc", "hms", "hunspell", "iterators", "lazyeval", "lintr", "lme4", "lubridate", "MASS", "Matrix", "openssl", "plotrix", "quantmod", "raster", "RcppEigen", "RCurl", "registry", "reshape2", "rgl", "rlang", "rmarkdown", "rprojroot", "shapes", "slam", "sp", "spam", "spdep", "stringi", "testthat", "tibble", "tidyselect", "timeDate", "viridis", "withr", "xts", "zoo"))
install.packages(c("ade4", "adegraphics", "ape", "backports", "car", "covr", "curl", "dae", "DescTools", "devtools", "dotCall64", "ellipse", "foreach", "git2r", "glue", "Hmisc", "hms", "hunspell", "iterators", "lazyeval", "lintr", "lme4", "lubridate", "MASS", "Matrix", "openssl", "plotrix", "quantmod", "raster", "RcppEigen", "RCurl", "registry", "reshape2", "rgl", "rlang", "rmarkdown", "rprojroot", "shapes", "slam", "sp", "spam", "spdep", "stringi", "testthat", "tibble", "tidyselect", "timeDate", "viridis", "withr", "xts", "zoo"))
install.packages(c("ade4", "adegraphics", "ape", "backports", "car", "covr", "curl", "dae", "DescTools", "devtools", "dotCall64", "ellipse", "foreach", "git2r", "glue", "Hmisc", "hms", "hunspell", "iterators", "lazyeval", "lintr", "lme4", "lubridate", "MASS", "Matrix", "openssl", "plotrix", "quantmod", "raster", "RcppEigen", "RCurl", "registry", "reshape2", "rgl", "rlang", "rmarkdown", "rprojroot", "shapes", "slam", "sp", "spam", "spdep", "stringi", "testthat", "tibble", "tidyselect", "timeDate", "viridis", "withr", "xts", "zoo"))
install.packages("Hmisc")
install.packages("git2r")
library(MultBiplotR)
X=as.matrix(wine[,4:21])
y=as.numeric(wine[,2])-1
mifit=PLSR(y,X, CrossValidation=TRUE)
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, CrossValidation=TRUE)
mifit=PLSR(y,X)
mifit$RegParameters
plot(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/plot.PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/plot.PLSR.R')
plot(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/plot.PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/plot.PLSR.R')
summary(mifit)
class(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/summary.PLSR.R')
summary(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/summary.PLSR.R')
summary(mifit)
names(mifit)
mifit$R2
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/summary.PLSR.R')
summary(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/summary.PLSR.R')
summary(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/summary.PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/summary.PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/summary.PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/summary.PLSR.R')
summary(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/summary.PLSR.R')
summary(mifit)
install_github("villardon/MultBiplotR", dependencies = TRUE)
library(devtools)
install_github("villardon/MultBiplotR", dependencies = TRUE)
install.packages("rgl")
install.packages("rgl")
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/summary.PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/summary.PLSR.R')
summary(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
help("sample")
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, Validation="Bootstrap")
library(MultBiplotR)
mifit=PLSR(y,X, Validation="Bootstrap")
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, Validation="Bootstrap")
mifit$RegParameters
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit$CrossParameters
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, Validation="Bootstrap")
mifit$CrossParameters
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit$CrossParameters
mifit=PLSR(y,X, Validation="Bootstrap")
mifit$CrossR2
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, Validation="Bootstrap")
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, Validation="Bootstrap")
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, Validation="Bootstrap")
mifit$CrossParameters
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit$CrossParameters
mifit$CrossParameters
mifit=PLSR(y,X, Validation="Bootstrap")
mifit$RegParameters
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, Validation="Bootstrap")
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, Validation="Bootstrap")
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, Validation="Bootstrap")
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, Validation="Bootstrap")
mifit$RegParameters
summary(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/summary.PLSR.R')
mifit$CrossR2
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/summary.PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/summary.PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/summary.PLSR.R')
summary(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, Validation="Bootstrap")
summary(mifit)
plot(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, Validation="Bootstrap")
summary(mifit)
mifit$RegParameters
plot(mifit)
mibip=Biplot.PLSR(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, Validation="Bootstrap")
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, Validation="Bootstrap")
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR.R')
mifit=PLSR(y,X, Validation="Bootstrap")
summary(mifit)
plot(mifit)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSRfit.R')
y=as.numeric(wine[,1])-1
PLSwine=PLSR1Bin(y, X, S=3, penalization = 0.1, cte=TRUE, Algorithm=1)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1Bin.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1BinFit.R')
PLSwine=PLSR1Bin(y, X, S=3, penalization = 0.1, cte=TRUE, Algorithm=1)
PLSwine
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/PLSR1Bin.R')
PLSwine=PLSR1Bin(y, X, S=3, penalization = 0.1, cte=TRUE, Algorithm=1)
summary(PLSwine$BinaryFit)
e
y=as.numeric(wine[,1])-1
dim(y)
length(y)
y=as.numeric(wine[,2])-1
PLSwine=PLSR1Bin(y, X, S=3, penalization = 0.1, cte=TRUE, Algorithm=1)
summary(PLSwine$BinaryFit)
winePLSbip=Biplot.PLSR1BIN(PLSwine)
summary(winePLSbip)
plot(winePLSbip,  ColorInd=as.integer(wine[,3]), IndLabels= wine[,3], mode="a", MinQualityVar=0, PlotSupVars=TRUE, SupMode="s", ShowBox=TRUE)
names(winePLSbip)
class(winePLSbip)
summary(PLSwine)
names(PLSwine)
PLSwine$BinaryFit
summary(PLSwine$BinaryFit)
install.packages("rgl")
library(MultBiplotR)
help("CanonicalBiplot")
data(wine)
X=wine[,4:21]
canbip=CanonicalBiplot(X, group=wine$Group)
plot(canbip, mode="s")
class(canbip)
help("Circle")
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/plot.Canonical.Biplot.R')
data(wine)
X=wine[,4:21]
canbip=CanonicalBiplot(X, group=wine$Group)
plot(canbip, mode="s")
library(MultBiplotR)
plot3dCanonicalBiplot(plot3dCanonicalBiplot)
plot3dCanonicalBiplot(canbip)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/plot3dCanonicalBiplot.R')
plot3dCanonicalBiplot(canbip)
canbip
summary(canbip)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/plot3dCanonicalBiplot.R')
canbip$$Variable_Coord
canbip$Variable_Coord
n = dim(V)[1]
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/plot3dCanonicalBiplot.R')
plot3dCanonicalBiplot(canbip)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/plot3dCanonicalBiplot.R')
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/plot3dCanonicalBiplot.R')
plot3dCanonicalBiplot(canbip)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/plot3dCanonicalBiplot.R')
plot3dCanonicalBiplot(canbip)
library(rgl)
plot3dCanonicalBiplot(canbip)
source('~/Dropbox/0 ProgramasR/Paquetes/MultBiplotR/R/plot3dCanonicalBiplot.R')
plot3dCanonicalBiplot(canbip)
help(spheres3d)
install.packages("twitteR")
library("twitteR")
library("ROAuth")
install.packages("ROAuth")
library("twitteR")
library("ROAuth")
cred <- OAuthFactory$new(consumerKey='jCYbtdkPWu13wig4Muc3CS3Sj',
consumerSecret='KHDTe5A4ejjVBYS6XAgfjdupWx7XpopNRjd8p7zbMsHfUQ3a0k',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
registerTwitterOAuth(cred)
?setup_twitter_oauth
setup_twitter_oauth("jCYbtdkPWu13wig4Muc3CS3Sj", "KHDTe5A4ejjVBYS6XAgfjdupWx7XpopNRjd8p7zbMsHfUQ3a0k")
setup_twitter_oauth("jCYbtdkPWu13wig4Muc3CS3Sj", "KHDTe5A4ejjVBYS6XAgfjdupWx7XpopNRjd8p7zbMsHfUQ3a0k")
setup_twitter_oauth("jCYbtdkPWu13wig4Muc3CS3Sj", "KHDTe5A4ejjVBYS6XAgfjdupWx7XpopNRjd8p7zbMsHfUQ3a0k")
cred$handshake(cainfo="cacert.pem")
install.packages("httr")
install.packages("SchedulerR")
setwd("~/Dropbox/SchedulerR")
setwd("~/Dropbox/SchedulerR")
api_key <- "jCYbtdkPWu13wig4Muc3CS3Sj"
api_secret <- "KHDTe5A4ejjVBYS6XAgfjdupWx7XpopNRjd8p7zbMsHfUQ3a0k"
access_token <- "595393153-mkfpvkRumIzZIoyMXnvsKAbgBm9nblK8avvH0CqK"
access_token_secret <- "oQY7Ky70r1J6llGB1qSz4p6LTSXnr1gTHUfO6b7nSwb9j"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
library(twitteR)
library(httr)
library(SchedulerR)
setwd("~/Dropbox/SchedulerR")
api_key <- "jCYbtdkPWu13wig4Muc3CS3Sj"
api_secret <- "KHDTe5A4ejjVBYS6XAgfjdupWx7XpopNRjd8p7zbMsHfUQ3a0k"
access_token <- "595393153-mkfpvkRumIzZIoyMXnvsKAbgBm9nblK8avvH0CqK"
access_token_secret <- "oQY7Ky70r1J6llGB1qSz4p6LTSXnr1gTHUfO6b7nSwb9j"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
clinton_tweets <- userTimeline("HillaryClinton", n = 3200)
clinton_tweets
tweetsc.df <- twListToDF(clinton_tweets)
dim(tweetsc.df)
tweetsc.df
date<-Sys.Date()
date<-as.character(date)
name<-paste(date,".RData")
save(tweetsc.df, file =name)
name
term.freq <- rowSums(as.matrix(tdm))
rowSums(as.matrix(tdm))
taskscheduler_create(taskname = "taskclinton", rscript = clintontweets,
schedule = "DAILY", starttime = "11:30", startdate = format(Sys.Date(), "%d/%m/%Y"))
library(SchedulerR)
install.packages('data.table')
install.packages('knitr')
install.packages('miniUI')
install.packages('shiny')
install.packages("taskscheduleR", repos = "http://www.datatailor.be/rcube", type = "source")
tweetsc.df
date<-Sys.Date()
date<-as.character(date)
name<-paste(date,".RData")
save(tweetsc.df, file =name)
tdm
as.matrix(tweetsc.df)
usal_tweets <- userTimeline("Universidad de Salamanca", n = 3200)
setwd("~/Dropbox/SchedulerR")
api_key <- "jCYbtdkPWu13wig4Muc3CS3Sj"
api_secret <- "KHDTe5A4ejjVBYS6XAgfjdupWx7XpopNRjd8p7zbMsHfUQ3a0k"
access_token <- "595393153-mkfpvkRumIzZIoyMXnvsKAbgBm9nblK8avvH0CqK"
access_token_secret <- "oQY7Ky70r1J6llGB1qSz4p6LTSXnr1gTHUfO6b7nSwb9j"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
usal_tweets <- userTimeline("Universidad de Salamanca", n = 3200)
tweetsc.df <- twListToDF(clinton_tweets)
usal_tweets
install_github("bnosac/taskscheduleR", dependencies = TRUE)
library(devtools)
install_github("bnosac/taskscheduleR", dependencies = TRUE)
tweets_sanders <- searchTwitter('@BernieSanders', n=1500)
tweets_sanders
tweetsc.df <- twListToDF(tweets_sanders)
dim(tweetsc.df)
tweets_sanders <- searchTwitter('@PuriGalindo', n=1500)
tweets_puri <- searchTwitter('@PuriGalindo', n=1500)
tweetsc.df <- twListToDF(tweets_puri)
dim(tweetsc.df)
tweetsc.df
tweets_puri <- searchTwitter('@usal', n=1500)
tweets_usal <- searchTwitter('@usal', n=1500)
tweetsc.df <- twListToDF(tweets_usal)
dim(tweetsc.df)
tweetsc.df
tweets_usal <- searchTwitter('@VIIICentenario', n=1500)
tweetsc.df <- twListToDF(tweets_usal)
dim(tweetsc.df)
tweetsc.df
cent_tweets <- userTimeline("VIIICentenario", n = 3200)
tweetsc.df <- twListToDF(cent_tweets)
dim(tweetsc.df)
tweetsc.df
tweets_usal <- searchTwitter('Salamanca', n=1500)
tweetsc.df <- twListToDF(tweets_usal)
dim(tweetsc.df)
tweets_usal
tweetsc.df
tweets_usal <- searchTwitter('Universidad de Salamanca', n=1500)
tweetsc.df <- twListToDF(tweets_usal)
dim(tweetsc.df)
tweetsc.df
tweetsc.df
install.packages("bigpca")
library("bigpca", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
#' # create a test big.matrix object (file-backed)
#' orig.dir <- getwd(); setwd(tempdir()); # move to temporary dir
#' bM <- filebacked.big.matrix(20, 50,
#'        dimnames = list(paste("r",1:20,sep=""), paste("c",1:50,sep="")),
#'        backingfile = "test.bck",  backingpath = getwd(), descriptorfile = "test.dsc")
#' bM[1:20,] <- replicate(50,rnorm(20))
#' prv.big.matrix(bM)
#' # now transpose
#' tbM <- big.t(bM,dir=getwd(),verbose=T)
#' prv.big.matrix(tbM,row=10,col=4)
#' colSDs <- bmcapply(tbM,2,sd,n.cores=10)
#' rowSDs <- bmcapply(bM,1,sd,n.cores=10) # use up to 10 cores if available
#' ##  generate some data with reasonable intercorrelations ##
#' mat <- sim.cor(500,200,genr=function(n){ (runif(n)/2+.5) })
#' bmat <- as.big.matrix(mat)
#' # calculate PCA
#' result <- big.PCA(bmat)
#' corrected <- PC.correct(result2,bmat)
#' corrected2 <- PC.correct(result2,bmat,n.cores=5)
#' all.equal(corrected,corrected2)
#' rm(tbM); rm(bM);rm(result);
#' rm(corrected);rm(corrected2); rm(bmat)
#' clear_active_bms() # delete big.matrix objects in memory
#' unlink(c("test.bck","test.dsc"))
#' setwd(orig.dir)
orig.dir <- getwd(); setwd(tempdir()); # move to temporary dir
bM <- filebacked.big.matrix(20, 50,
dimnames = list(paste("r",1:20,sep=""), paste("c",1:50,sep="")),
backingfile = "test.bck",  backingpath = getwd(), descriptorfile = "test.dsc")
bM[1:20,] <- replicate(50,rnorm(20))
prv.big.matrix(bM)
tbM <- big.t(bM,dir=getwd(),verbose=T)
prv.big.matrix(tbM,row=10,col=4)
colSDs <- bmcapply(tbM,2,sd,n.cores=10)
rowSDs <- bmcapply(bM,1,sd,n.cores=10) # use up to 10 cores if available
mat <- sim.cor(500,200,genr=function(n){ (runif(n)/2+.5) })
bmat <- as.big.matrix(mat)
result <- big.PCA(bmat)
corrected <- PC.correct(result2,bmat)
corrected2 <- PC.correct(result2,bmat,n.cores=5)
all.equal(corrected,corrected2)
rm(tbM); rm(bM);rm(result);
rm(corrected);rm(corrected2); rm(bmat)
clear_active_bms() # delete big.matrix objects in memory
unlink(c("test.bck","test.dsc"))
setwd(orig.dir)
install.packages("GGEBiplotGUI")
library("GGEBiplotGUI", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
data(Ontario)
GGEBiplot(Data = Ontario)
if (!require(devtools))
install.packages("devtools")
library(devtools)
install_github("villardon/MultBiplotR", dependencies = TRUE)
