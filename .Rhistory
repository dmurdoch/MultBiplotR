colnames(results)=c("Cut", "Sensitivity-Recall", "False Negative", "False Positive", "Specificity", "Eficacy", "PPV-Precision", "F1")
class(results)="roccurve"
return(results)
}
curvaroc=ROCcurve(labels=CardioTrain$Exitus, values=model$fitted.values)
curvaroc
predicc=model$fitted.values > 0.2
table(CardioTrain$Exitus, predicc)
curvaroc=ROCcurve(labels=CardioTrain$Exitus, values=model$fitted.values, ncuts=20)
curvaroc
install.packages("repart")
install.packages("rpart")
library(rpart)
fit <- rpart(Exitus ~., data = CardioTrain, method="class")
summary(fit)
fit <- rpart(Exitus ~., data = CardioTrain, method="class")
fit
install.packages("CHAID", repos="http://R-Forge.R-project.org")
library(CHAID)
library(help=CHAID)
install.packages("partykit")
install.packages("CHAID", repos="http://R-Forge.R-project.org")
dt.chaid  <- chaid(Exitus~ . ,
control = chaid_control(minprob = 0.001,
minsplit = 500,minbucket = 200), data=CardioTrain)
library(CHAID)
dt.chaid  <- chaid(Exitus~ . ,
control = chaid_control(minprob = 0.001,
minsplit = 500,minbucket = 200), data=CardioTrain)
names(CardioTrain)
dt.chaid  <- chaid(Exitus~ .-Edad ,
control = chaid_control(minprob = 0.001,
minsplit = 500,minbucket = 200), data=CardioTrain)
CardioTrain$Critico
CardioTrain
dt.chaid  <- chaid(Exitus~ -Edad ,
control = chaid_control(minprob = 0.001,
minsplit = 500,minbucket = 200), data=CardioTrain)
help("formula")
dt.chaid  <- chaid(Exitus~ Sexo+Endocarditis+Critico+FEeuro2+NYHA+ENFPERI+HTP+REOPE+CR2+IAM90+ER+COR+MIXTA,
control = chaid_control(minprob = 0.001,
minsplit = 500,minbucket = 200), data=CardioTrain)
plot(dt.chaid,
uniform = T,
compress = T,
margin = 0.2,
branch = 0.3)
text(dt.chaid,
use.n = T,
digits = 3,
cex = 0.6)
summary(dt.chaid)
dt.chaid
help("rpart")
dim(CardioValid)
CardioValid=read.spss("ValidacionMeisy.sav", to.data.frame =TRUE)
head(CardioValid)
dim(CardioValid)
X_Valid=
model <- glm(Exitus ~.,family=binomial(link='logit'), data=CardioTrain)
X_Valid= CardioValid[,1:14]
logModel <- glm(Exitus ~.,family=binomial(link='logit'), data=CardioTrain)
predict(logModel,X_Valid)
X_Valid$FEeuro2
CardioValid=read.spss("ValidacionMeisy.sav", to.data.frame =TRUE)
head(CardioValid)
dim(CardioValid)
X_Valid= CardioValid[,1:14]
predict(logModel,X_Valid)
CardioValid=read.spss("ValidacionMeisy.sav", to.data.frame =TRUE)
head(CardioValid)
dim(CardioValid)
X_Valid= CardioValid[,1:14]
predict(logModel,X_Valid)
CardioTrain$NYHA
CardioValid$NYHA
levels(CardioTrain$NYHA)
levels(CardioValid$NYHA)
setwd("~/Desktop/0 GRACE score")
CardioTrain=read.spss("BaseMeisy.sav", to.data.frame =TRUE)
head(CardioTrain)
dim(CardioTrain)
CardioValid=read.spss("ValidacionMeisy.sav", to.data.frame =TRUE)
head(CardioValid)
dim(CardioValid)
X_Valid= CardioValid[,1:14]
logModel <- glm(Exitus ~.,family=binomial(link='logit'), data=CardioTrain)
names(logModel)
predict(logModel,X_Valid)
X_Train = CardioTrain[,1:14]
predict(logModel,X_Train)
names(logModel)
logModel$linear.predictors
cbind(logModel$linear.predictors, predict(logModel,X_Train))
linterm = predict(logModel,X_Valid)
predprob= 1/(1+exp(-1*linterm))
predprob
predicc=predprob > 0.5
predicc
table(CardioValid$Exitus, predicc)
curvaroc=roc(CardioTrain$Exitus, model$fitted.values)
plot(curvaroc)
ROCcurve <- function(labels, values, ncuts=10){
if (!is.factor(labels)) stop("Labels must be a factor")
if (nlevels(labels) != 2) stop("Labels must be a factor with two levels")
labels= as.numeric(labels)-1
cuts = pretty(values, n=ncuts)
results=matrix(0,length(cuts), 8)
for (i in 1:length(cuts)){
prediction=as.numeric(values>cuts[i])
a=sum(labels * prediction)
b=sum(labels * (1-prediction))
c=sum((1-labels) * prediction)
d=sum((1-labels) * (1-prediction))
results[i,1] = cuts[i]
results[i,2]=a/(a+b)
results[i,3]=b/(a+b)
results[i,4]=c/(c+d)
results[i,5]=d/(c+d)
results[i,6]=(a+d)/(a+b+c+d)
results[i,7]=a/(a+c)
results[i,8]=2*((results[i,7]*results[i,2])/(results[i,7]+results[i,2]))
}
colnames(results)=c("Cut", "Sensitivity-Recall", "False Negative", "False Positive", "Specificity", "Eficacy", "PPV-Precision", "F1")
class(results)="roccurve"
return(results)
}
curvaroc=ROCcurve(labels=CardioTrain$Exitus, values=model$fitted.values, ncuts=20)
curvaroc
predicc=predprob > 0.2
table(CardioTrain$Exitus, predicc)
curvaroc=ROCcurve(labels=CardioValid$Exitus, values=predprob, ncuts=20)
curvaroc
predicc=predprob > 0.2
table(CardioValid$Exitus, predicc)
conf=table(CardioValid$Exitus, predicc)
sum(conf)
(conf[1,1]+conf[2,2])/sum(conf)
PercentLog=(conf[1,1]+conf[2,2])/sum(conf)
PercentLog
fitrp <- rpart(Exitus ~., data = CardioTrain, method="class")
summary(fit)
predicted= predict(fitrp,X_Valid)
predicted
quiebra=read.spss("QUIEBRA.sav", to.data.frame =TRUE)
quiebra
library(CHAID)
dt.chaid  <- chaid(Exitus~ Sexo+Endocarditis+Critico+FEeuro2+NYHA+ENFPERI+HTP+REOPE+CR2+IAM90+ER+COR+MIXTA,
control = chaid_control(minprob = 0.001,
minsplit = 500,minbucket = 200), data=CardioTrain)
plot(dt.chaid,
uniform = T,
compress = T,
margin = 0.2,
branch = 0.3)
text(dt.chaid,
use.n = T,
digits = 3,
cex = 0.6)
summary(dt.chaid)
fitsvm <-svm(Exitus ~., data = CardioTrain)
library(e1071)
fitsvm <-svm(Exitus ~., data = CardioTrain)
summary(fit)
summary(fitsvm)
predictedSVM= predicted= predict(fitsvm,X_Valid)
predictedSVM
conf=table(CardioValid$Exitus, predictedtree)
predictedtree= predict(fitrp,X_Valid)
predictedtree
conf=table(CardioValid$Exitus, predictedSVM)
PercentLog=(conf[1,1]+conf[2,2])/sum(conf)
PercentSVM=(conf[1,1]+conf[2,2])/sum(conf)
PercentSVM
fitbayes <-naiveBayes(Exitus ~., data = CardioTrain)
summary(fitbayes)
fitbayes <-naiveBayes(Exitus ~., data = CardioTrain)
summary(fitbayes)
predictedBayes= predicted= predict(fitbayes,X_Valid)
conf=table(CardioValid$Exitus, predictedBayes)
PercentBayes=(conf[1,1]+conf[2,2])/sum(conf)
PercentBayes
library(knn)
library(randomForest)
help(randomForest)
fitRF <- randomForest(Exitus ~., data = CardioTrain,ntree=500)
summary(fitRF)
fitRF
predictedRF = predict(fitRF,X_Valid)
conf=table(CardioValid$Exitus, predictedRF)
PercentBayes=(conf[1,1]+conf[2,2])/sum(conf)
PercentRF=(conf[1,1]+conf[2,2])/sum(conf)
PercentRF
fitXBB <- train(Exitus ~., data = CardioTrain, method = "gbm", trControl = fitControl, verbose = FALSE)
library(caret)
fitControl <- trainControl( method = "repeatedcv", number = 4, repeats = 4)
fitXBB <- train(Exitus ~., data = CardioTrain, method = "gbm", trControl = fitControl, verbose = FALSE)
fitXBB <- train(Exitus ~., data = CardioTrain, method = "gbm", trControl = fitControl, verbose = FALSE)
fitXGB <- train(Exitus ~., data = CardioTrain, method = "gbm", trControl = fitControl, verbose = FALSE)
predict(fitXGB,X_Valid,type= "prob")
predict(fitXGB,X_Valid,type= "prob")[,2]
predictedXGB = predict(fitXGB,X_Valid,type= "prob")[,2] > 0.5
conf=table(CardioValid$Exitus, predictedXGB)
PercentXGB=(conf[1,1]+conf[2,2])/sum(conf)
PercentXGB
library(tree)
install.packages("tree")
tr = tree(Exitus ~., data = CardioTrain, method="class")
library(tree)
tr = tree(Exitus ~., data = CardioTrain, method="class")
summary(tr)
plot(tr); text(tr)
tr
predictedTREE = predict(tr,X_Valid)
predictedTREE
predictedTREE = predict(tr,X_Valid)[,2] > 0.5
predictedTREE
conf=table(CardioValid$Exitus, predictedTREE)
conf
PercentTREE=(conf[1,1]+conf[2,2])/sum(conf)
predictedTREE = predict(tr,X_Valid)[,2] > 0.2
conf=table(CardioValid$Exitus, predictedTREE)
PercentTREE=(conf[1,1]+conf[2,2])/sum(conf)
PercentTREE
library(evtree)
install.packages("evtree")
ev.raw = evtree(Exitus ~., data = CardioTrain)
library(evtree)
ev.raw = evtree(Exitus ~., data = CardioTrain)
plot(ev.raw)
table(predict(ev.raw), CardioTrain$Exitus)
1-mean(predict(ev.raw) == quiebra$Output)
table(CardioTrain$Exitus, predict(ev.raw))
library(rpart)
fitrp <- rpart(Exitus ~., data = CardioTrain, method="class")
summary(fit)
predictedtree= predict(fitrp,X_Valid)
predictedtree
c(PercentLog, PercentSVM, PercentBayes, PercentRF, PercentXGB, PercentTREE)
curvaroc=ROCcurve(labels=CardioValid$Exitus, values=predprob, ncuts=20)
curvaroc
predicc=predprob > 0.2
conf=table(CardioValid$Exitus, predicc)
PercentLog=(conf[1,1]+conf[2,2])/sum(conf)
library(rpart)
# grow tree
fitrp <- rpart(Exitus ~., data = CardioTrain, method="class")
summary(fit)
#Predict Output
predictedtree= predict(fitrp,X_Valid)
library(CHAID)
dt.chaid  <- chaid(Exitus~ Sexo+Endocarditis+Critico+FEeuro2+NYHA+ENFPERI+HTP+REOPE+CR2+IAM90+ER+COR+MIXTA,
control = chaid_control(minprob = 0.001,
minsplit = 500,minbucket = 200), data=CardioTrain)
plot(dt.chaid,
uniform = T,
compress = T,
margin = 0.2,
branch = 0.3)
# Label on Decision Tree
text(dt.chaid,
use.n = T,
digits = 3,
cex = 0.6)
summary(dt.chaid)
library(e1071)
fitsvm <-svm(Exitus ~., data = CardioTrain)
summary(fitsvm)
#Predict Output
predictedSVM = predict(fitsvm,X_Valid)
conf=table(CardioValid$Exitus, predictedSVM)
PercentSVM=(conf[1,1]+conf[2,2])/sum(conf)
fitbayes <-naiveBayes(Exitus ~., data = CardioTrain)
summary(fitbayes)
#Predict Output
predictedBayes= predict(fitbayes,X_Valid)
conf=table(CardioValid$Exitus, predictedBayes)
PercentBayes=(conf[1,1]+conf[2,2])/sum(conf)
library(randomForest)
fitRF <- randomForest(Exitus ~., data = CardioTrain,ntree=500)
summary(fitRF)
#Predict Output
predictedRF = predict(fitRF,X_Valid)
conf=table(CardioValid$Exitus, predictedRF)
PercentRF=(conf[1,1]+conf[2,2])/sum(conf)
library(caret)
# Fitting model XGBoost
fitControl <- trainControl( method = "repeatedcv", number = 4, repeats = 4)
fitXGB <- train(Exitus ~., data = CardioTrain, method = "gbm", trControl = fitControl, verbose = FALSE)
predictedXGB = predict(fitXGB,X_Valid,type= "prob")[,2] > 0.5
conf=table(CardioValid$Exitus, predictedXGB)
PercentXGB=(conf[1,1]+conf[2,2])/sum(conf)
# TREE package
library(tree)
tr = tree(Exitus ~., data = CardioTrain, method="class")
summary(tr)
plot(tr); text(tr)
predictedTREE = predict(tr,X_Valid)[,2] > 0.2
conf=table(CardioValid$Exitus, predictedTREE)
PercentTREE=(conf[1,1]+conf[2,2])/sum(conf)
library(evtree)
ev.raw = evtree(Exitus ~., data = CardioTrain)
plot(ev.raw)
table(CardioTrain$Exitus, predict(ev.raw))
c(PercentLog, PercentSVM, PercentBayes, PercentRF, PercentXGB, PercentTREE)
names(Percents)=c("Logistic", "SUpport V M", "NaiveByes", "Random Forest", "XGBoost", "Tree")
Percents=c(PercentLog, PercentSVM, PercentBayes, PercentRF, PercentXGB, PercentTREE)
names(Percents)=c("Logistic", "SUpport V M", "NaiveByes", "Random Forest", "XGBoost", "Tree")
Percents
help("plot")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/0 Transparencias Machine Learning/EjemploCardiologia")
CardioTrain=read.spss("CardioTrain.sav", to.data.frame =TRUE)
library(foreign)
CardioTrain=read.spss("CardioTrain.sav", to.data.frame =TRUE)
head(CardioTrain)
dim(CardioTrain)
X_Train = CardioTrain[,1:14]
CardioValid=read.spss("CardioValid.sav", to.data.frame =TRUE)
head(CardioValid)
dim(CardioValid)
X_Valid= CardioValid[,1:14]
logModel <- glm(Exitus ~.,family=binomial(link='logit'), data=CardioTrain)
names(logModel)
linterm = predict(logModel,X_Valid)
predprob= 1/(1+exp(-1*linterm))
predicc=predprob > 0.5
table(CardioValid$Exitus, predicc)
ROCcurve <- function(labels, values, ncuts=10){
if (!is.factor(labels)) stop("Labels must be a factor")
if (nlevels(labels) != 2) stop("Labels must be a factor with two levels")
labels= as.numeric(labels)-1
cuts = pretty(values, n=ncuts)
results=matrix(0,length(cuts), 8)
for (i in 1:length(cuts)){
prediction=as.numeric(values>cuts[i])
a=sum(labels * prediction)
b=sum(labels * (1-prediction))
c=sum((1-labels) * prediction)
d=sum((1-labels) * (1-prediction))
results[i,1] = cuts[i]
results[i,2]=a/(a+b)
results[i,3]=b/(a+b)
results[i,4]=c/(c+d)
results[i,5]=d/(c+d)
results[i,6]=(a+d)/(a+b+c+d)
results[i,7]=a/(a+c)
results[i,8]=2*((results[i,7]*results[i,2])/(results[i,7]+results[i,2]))
}
colnames(results)=c("Cut", "Sensitivity-Recall", "False Negative", "False Positive", "Specificity", "Eficacy", "PPV-Precision", "F1")
class(results)="roccurve"
return(results)
}
plot.roccurve <- function(roc, ...){
plot(roc[,4], roc[,2], type="l", xlab="1-Specificity", ylab = "Sensitivity", main="ROC Curve", ...)
}
curvaroc=ROCcurve(labels=CardioValid$Exitus, values=predprob, ncuts=20)
curvaroc
predicc=predprob > 0.2
conf=table(CardioValid$Exitus, predicc)
PercentLog=(conf[1,1]+conf[2,2])/sum(conf)
conf
PercentLog
predicc=predprob > 0.5
conf=table(CardioValid$Exitus, predicc)
PercentLog=(conf[1,1]+conf[2,2])/sum(conf)
conf
PercentLog
plot(curvaroc)
install.packages("foreign", "pROC", "rpart", "partykit", "knn", "caret", "gbm", "neuralnet", "tree", "evtree", "randomForest", "e1071")
install.packages("CHAID", repos="http://R-Forge.R-project.org")
library(foreign)
CardioTrain=read.spss("CardioTrain.sav", to.data.frame =TRUE)
head(CardioTrain)
dim(CardioTrain)
X_Train = CardioTrain[,1:14]
CardioValid=read.spss("CardioValid.sav", to.data.frame =TRUE)
head(CardioValid)
dim(CardioValid)
X_Valid= CardioValid[,1:14]
#  Ajuste del mdelo con el conjunto de entrenamiento
logModel <- glm(Exitus ~.,family=binomial(link='logit'), data=CardioTrain)
names(logModel)
# Predicción para el conjunto de validación
linterm = predict(logModel,X_Valid)
predprob= 1/(1+exp(-1*linterm))
predicc=predprob > 0.5
conf=table(CardioValid$Exitus, predicc)
PercentLog1=(conf[1,1]+conf[2,2])/sum(conf)
conf
PercentLog1
ROCcurve <- function(labels, values, ncuts=10){
if (!is.factor(labels)) stop("Labels must be a factor")
if (nlevels(labels) != 2) stop("Labels must be a factor with two levels")
labels= as.numeric(labels)-1
cuts = pretty(values, n=ncuts)
results=matrix(0,length(cuts), 8)
for (i in 1:length(cuts)){
prediction=as.numeric(values>cuts[i])
a=sum(labels * prediction)
b=sum(labels * (1-prediction))
c=sum((1-labels) * prediction)
d=sum((1-labels) * (1-prediction))
results[i,1] = cuts[i]
results[i,2]=a/(a+b)
results[i,3]=b/(a+b)
results[i,4]=c/(c+d)
results[i,5]=d/(c+d)
results[i,6]=(a+d)/(a+b+c+d)
results[i,7]=a/(a+c)
results[i,8]=2*((results[i,7]*results[i,2])/(results[i,7]+results[i,2]))
}
colnames(results)=c("Cut", "Sensitivity-Recall", "False Negative", "False Positive", "Specificity", "Eficacy", "PPV-Precision", "F1")
class(results)="roccurve"
return(results)
}
plot.roccurve <- function(roc, ...){
plot(roc[,4], roc[,2], type="l", xlab="1-Specificity", ylab = "Sensitivity", main="ROC Curve", ...)
}
curvaroc=ROCcurve(labels=CardioValid$Exitus, values=predprob, ncuts=20)
curvaroc
plot(curvaroc)
predicc=predprob > 0.2
conf=table(CardioValid$Exitus, predicc)
PercentLog2=(conf[1,1]+conf[2,2])/sum(conf)
conf
PercentLog2
library(rpart)
# grow tree
fitrp <- rpart(Exitus ~., data = CardioTrain, method="class")
summary(fit)
#Predict Output
predictedtree= predict(fitrp,X_Valid)
library(CHAID)
dt.chaid  <- chaid(Exitus~ Sexo+Endocarditis+Critico+FEeuro2+NYHA+ENFPERI+HTP+REOPE+CR2+IAM90+ER+COR+MIXTA,
control = chaid_control(minprob = 0.001,
minsplit = 500,minbucket = 200), data=CardioTrain)
plot(dt.chaid,
uniform = T,
compress = T,
margin = 0.2,
branch = 0.3)
# Label on Decision Tree
text(dt.chaid,
use.n = T,
digits = 3,
cex = 0.6)
summary(dt.chaid)
library(e1071)
fitsvm <-svm(Exitus ~., data = CardioTrain)
summary(fitsvm)
#Predict Output
predictedSVM = predict(fitsvm,X_Valid)
conf=table(CardioValid$Exitus, predictedSVM)
PercentSVM=(conf[1,1]+conf[2,2])/sum(conf)
fitbayes <-naiveBayes(Exitus ~., data = CardioTrain)
summary(fitbayes)
#Predict Output
predictedBayes= predict(fitbayes,X_Valid)
conf=table(CardioValid$Exitus, predictedBayes)
PercentBayes=(conf[1,1]+conf[2,2])/sum(conf)
library(randomForest)
fitRF <- randomForest(Exitus ~., data = CardioTrain,ntree=500)
summary(fitRF)
#Predict Output
predictedRF = predict(fitRF,X_Valid)
conf=table(CardioValid$Exitus, predictedRF)
PercentRF=(conf[1,1]+conf[2,2])/sum(conf)
library(caret)
# Fitting model XGBoost
fitControl <- trainControl( method = "repeatedcv", number = 4, repeats = 4)
fitXGB <- train(Exitus ~., data = CardioTrain, method = "gbm", trControl = fitControl, verbose = FALSE)
predictedXGB = predict(fitXGB,X_Valid,type= "prob")[,2] > 0.5
conf=table(CardioValid$Exitus, predictedXGB)
PercentXGB=(conf[1,1]+conf[2,2])/sum(conf)
# TREE package
library(tree)
tr = tree(Exitus ~., data = CardioTrain, method="class")
summary(tr)
plot(tr); text(tr)
predictedTREE = predict(tr,X_Valid)[,2] > 0.2
conf=table(CardioValid$Exitus, predictedTREE)
PercentTREE=(conf[1,1]+conf[2,2])/sum(conf)
library(evtree)
ev.raw = evtree(Exitus ~., data = CardioTrain)
plot(ev.raw)
table(CardioTrain$Exitus, predict(ev.raw))
Percents=c(PercentLog1, PercentLog2, PercentSVM, PercentBayes, PercentRF, PercentXGB, PercentTREE)
names(Percents)=c("Logistic1", "Logistic2", "SUpport V M", "NaiveByes", "Random Forest", "XGBoost", "Tree")
Percents
logModel <- glm(Exitus ~.,family=binomial(link='logit'), data=CardioTrain)
names(logModel)
# Predicción para el conjunto de validación
linterm = predict(logModel,X_Valid)
predprob= 1/(1+exp(-1*linterm))
predicc=predprob > 0.5
conf=table(CardioValid$Exitus, predicc)
PercentLog1=(conf[1,1]+conf[2,2])/sum(conf)
conf
PercentLog1
help(abline)
plot.roccurve <- function(roc, ...){
plot(roc[,4], roc[,2], type="l", xlab="1-Specificity", ylab = "Sensitivity", main="ROC Curve", ...)
abline(0,1)
}
plot(curvaroc)
setwd("~/Downloads")
read.csv("adult.data")
datos=read.csv("adult.data")
datos
library(foreign)
write.foreign(datos, "c:/mydata.txt", "c:/mydata.sps",   package="SPSS")
write.foreign(datos, "c:/mydata.sps",   package="SPSS")
